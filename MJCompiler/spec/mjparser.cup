package rs.ac.bg.etf.ln110181d;

import java_cup.runtime.*;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.ln110181d.util.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.mj.runtime.*;

parser code
{:
	Logger log = Logger.getLogger(getClass());
	boolean errorDetected = false;

	public void syntax_error(Symbol cur_token)
	{
		errorDetected = true;
		int line = ((Symbol)cur_token).left;
		log.error("Syntax error (line " + line + ") Unexpected symbol " + (((Symbol)cur_token).value));
		//report_error("\nSintaksna greska ", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Unrecovered syntax error", cur_token);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error("Fatal error" + message, info);
	}

	public void report_error(String message, Object info)
	{
		//dump_stack();
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
		{
			msg.append("(line ").append(((Symbol)info).left).append(")");
			msg.append(" Unexpected symbol " + (((Symbol)info).value));
		}
		log.error(msg.toString());
	}
	
	public void reportSemanticError(String message, int line)
	{
		errorDetected = true;
		StringBuilder sb = new StringBuilder();
		sb.append("Semantic error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}

	public void reportRecoveredSyntaxError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Recovery syntax error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}
:}

scan with
{:
	Symbol s = this.getScanner().next_token();
	if (s != null)
	{
		if (s.value != null)
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " " + s.value.toString());
		}
		else
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " NULLL!!!");
		}
	}

	return s;
:}

init with
{:
	MyTab.init(); // Universe scope
	MyCode.init();
:}

action code
{:
	// Declarations
	Obj currentDeclTypeObj = MyTab.noObj;
	int declKind = Obj.NO_VALUE;	
	int stringCnt = 0;

	// Classes
	Obj currentClassObj = MyTab.noObj;
	boolean classContext = false;
	Obj superClassObj = MyTab.noObj;

	// Methods
	Obj currentMethodObj = MyTab.noObj;
	Struct retType = MyTab.noType;
	boolean isVoid = false;
	boolean returnFound = false;
	boolean voidReturnFound = false;
	int formalParamsCnt = 0;

	// Statements
	Stack<DesignatorInfo> designatorChainsStack = new Stack<DesignatorInfo>();
	public DesignatorInfo designatorTop()
	{
		return designatorChainsStack.peek();
	}
	boolean negation = false;
	
	Obj currentMethodCallObj = MyTab.noObj;
	int currentActualParam = 0;
	boolean isThisCall = false;

	//boolean inWhile = false;
	int whileCnt = 0;

	boolean mainFound = false;

	class Info
	{
		public Object value;
		public Struct type;

		public int getIntVal()
		{
			int val = 0;
			if (value instanceof Integer)
				val = (int)value;
			else if (value instanceof Character)
				val = (int)((Character)value).charValue();
			else if (value instanceof Boolean)
				val = (Boolean)value ? 1 : 0;
			
			return val;
		}
		
		public Info(Object value, Struct type)
		{
			this.value = value;
			this.type = type;
		}
	}
	
	class DesignatorInfo
	{
		public Obj obj;
		public boolean isElementOfArray = false;
		public boolean isClassMember = false;
		public boolean designatorStart = true;

		public DesignatorInfo(Obj obj, boolean isElem)
		{
			this.obj = obj;
			this.isElementOfArray = isElem;
		}

		public DesignatorInfo(Obj obj)
		{
			this.obj = obj;
		}

		public Struct getType()
		{
			if (obj.getType().getKind() == Struct.Array && isElementOfArray)
				return obj.getType().getElemType();
			return obj.getType();
		}
	}	

	class JumpContext
	{
		public LinkedList<Integer> beginPatches = new LinkedList<Integer>();
		public LinkedList<Integer> endPatches = new LinkedList<Integer>();
		public Stack<Boolean> and_notOr_stack = new Stack<Boolean>();
		public int ifElsePatch = 0;
		public boolean hasOr = false;
		public boolean isWhile = false;
		public boolean isAndSubcontext = false;
		public boolean isOrSubcontext = false;
		public int top = 0;
	}
	
	Stack<JumpContext> jumpContextStack = new Stack<JumpContext>();

	public Obj copyObj(Obj obj)
	{
		Obj newobj = new Obj(obj.getKind(), obj.getName(), obj.getType(), obj.getAdr(), obj.getLevel());
		SymbolDataStructure newSymbols = new HashTableDataStructure();
		for (Obj o : obj.getLocalSymbols())
			newSymbols.insertKey(o);
		newobj.setLocals(newSymbols);
		
		return newobj;
	}

	public Obj insertSymbol(int kind, String name, Struct type, int line)
	{
		Obj obj = MyTab.currentScope.findSymbol(name);
		boolean inherited = (obj instanceof MyObj) && ((MyObj)obj).isInherited;
		
		if (obj != null && obj != MyTab.noObj && !inherited)
		{
			parser.reportSemanticError("Symbol " + name + " already defined in the current scope", line);
			return MyTab.noObj;
		}
		else
			return MyTab.insert(kind, name, type, classContext);
	}
:}

// Keywords
terminal PROGRAM, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, WHILE, EXTENDS;

// Other tokens
terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal String STRING_CONST;

// Operators
terminal ADD, SUB, MUL, DIV, MOD, INC, DEC;
terminal EQ, NEQ, GRT, GRTE, LESS, LESSE;
terminal LAND, LOR;
terminal ASSIGN;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE;

// Program
non terminal Program;
non terminal Obj ProgramName;
non terminal GlobalDeclarationsOpt, GlobalDeclList, GlobalDecl;

// Constants
non terminal ConstDeclLine, ConstDeclSequence, ConstDecl;
non terminal Obj Type;

// Variables
non terminal GlobalVarDeclLine, GlobalVarDeclSequence;
non terminal LocalVarDeclOpt, LocalVarDeclList, LocalVarDeclLine;
non terminal FieldsDeclOpt, FieldsDeclList, FieldDeclLine;
non terminal VarDeclSequence;
non terminal Obj VarDecl;

// Methods
non terminal MethodDeclOpt, MethodDeclList, MethodDecl, RetType, MethodStart;
non terminal FormalParamsOpt, FormalParamsList, FormalParam;
non terminal ActualParamsOpt, ActualParamsList, ActualParam;
non terminal Obj MethodName;

// Classes
non terminal ClassDecl, ExtendsOpt, ClassMethodDeclOpt;
non terminal Obj ClassName;

// Statements and Expressions
non terminal Statement, StatementListOpt, StatementList, OpenStatement, ClosedStatement, SimpleStatement, JumpEnd, PatchElseEnd;
non terminal DesignatorInfo Designator, DesignatorPart;
non terminal DesignatorName, DesignatorListOpt, DesignatorList, ArrayAddr;
non terminal Info Expr, Term, TermList, Factor;
non terminal Integer Condition, CondTerm, CondFact, BigCondition;
non terminal PatchBegin, PatchEnd;
non terminal String Addop, Mulop;
non terminal Integer Relop;
non terminal Info FuncCall;
non terminal Info Value;
non terminal DesignatorInfo CallName;
non terminal IncDec, PushJumpContext;
non terminal Integer LoopKeyword;
non terminal LibFunctions;

// =========================
// ===== Program Rules =====
// =========================

Program ::= PROGRAM ProgramName GlobalDeclarationsOpt LBRACE:l MethodDeclOpt RBRACE LibFunctions
{:
	MyCode.dataSize = Tab.currentScope().getnVars();
	MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
	MyTab.closeScope();
	if (!mainFound)
		parser.reportSemanticError("Method \"main\" not found", lleft);
	parser.log.debug("****Program scope closed****");
	MyTab.dump(new MySymbolTableVisitor());
:};

LibFunctions ::= MethodDeclOpt;

ProgramName ::= IDENT:pName
{:
	RESULT = insertSymbol(Obj.Prog, pName, MyTab.noType, pNameleft);
	if (RESULT == MyTab.noObj)
		parser.reportSemanticError("Invalid program name", pNameleft);
	MyTab.openScope(RESULT);
	parser.log.debug("****Program scope opened****");
:};

// ===============================
// ===== Global declarations =====
// ===============================
GlobalDeclarationsOpt ::= GlobalDeclList;
GlobalDeclarationsOpt ::= /* epsilon */;

GlobalDeclList ::= GlobalDeclList GlobalDecl;
GlobalDeclList ::= GlobalDecl;

GlobalDecl ::= GlobalVarDeclLine;
GlobalDecl ::= ConstDeclLine;
GlobalDecl ::= ClassDecl;

// =============================
// ======== Const rules ========
// =============================
ConstDeclLine ::= CONST Type ConstDeclSequence SEMI {: currentDeclTypeObj = MyTab.noObj; :};
ConstDeclLine ::= CONST error:e SEMI {: parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); :};
ConstDeclSequence ::= ConstDeclSequence COMMA ConstDecl;
ConstDeclSequence ::= ConstDecl;

ConstDecl ::= error:e {: parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); :};
ConstDecl ::= IDENT:constName ASSIGN Value:info
{:
	if (!info.type.assignableTo(currentDeclTypeObj.getType()))
		parser.reportSemanticError("Type " + MyTab.getTypeObj(info.type).getName() + " not assignable to type " + currentDeclTypeObj.getName(), infoleft);
	else
	{
		RESULT = insertSymbol(Obj.Con, constName, currentDeclTypeObj.getType(), infoleft);
		((Obj)RESULT).setAdr(info.getIntVal());
	}
:};

// ===========================
// ======== Var rules ========
// ===========================
GlobalVarDeclLine ::= Type {: declKind = Obj.Var; :} GlobalVarDeclSequence SEMI {: currentDeclTypeObj = MyTab.noObj; :};

GlobalVarDeclSequence ::= GlobalVarDeclSequence COMMA VarDecl;
GlobalVarDeclSequence ::= VarDecl;
GlobalVarDeclSequence ::= error:e {: parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); :};

VarDeclSequence ::= VarDeclSequence COMMA VarDecl;
VarDeclSequence ::= VarDecl;
		
VarDecl ::= IDENT:varName
{:
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, currentDeclTypeObj.getType(), varNameleft);
:};
VarDecl ::= IDENT:varName LBRACKET RBRACKET
{:
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, new MyStruct(Struct.Array, currentDeclTypeObj.getType()), varNameleft);
:};

// =============================
// ======== Class rules ========
// =============================
ClassDecl ::= CLASS ClassName:classObj ExtendsOpt LBRACE FieldsDeclOpt ClassMethodDeclOpt RBRACE
{:
	if (currentClassObj != MyTab.noObj)
	{
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());
		MyTab.closeScope();
		parser.log.debug("Zatvoren opseg klase \"" + classObj.getName() +"\"");
	}
	currentClassObj = MyTab.noObj;
	superClassObj = MyTab.noObj;
	declKind = Obj.NO_VALUE;
	classContext = false;
:};

ClassName ::= IDENT:className
{:
	MyStruct struct = new MyStruct(Struct.Class);
	RESULT = insertSymbol(Obj.Type, className, struct, classNameleft);
	if (RESULT != MyTab.noObj)
	{
		MyTab.openScope(RESULT);
		MyTab.getCurrentScope().isClassScope = true;
		parser.log.debug("Otvoren opseg klase \"" + className +"\"");
		declKind = Obj.Fld;
		struct.myObj = RESULT;
	}
	currentClassObj = RESULT;
	classContext = true;	
:};

ExtendsOpt ::= EXTENDS IDENT:superClassName
{:
	Obj obj = MyTab.find(superClassName);
	if (obj == null || (obj.getKind() != Obj.Type && obj.getType().getKind() != Struct.Class))
		parser.reportSemanticError("Super class " + superClassName + " undefined", superClassNameleft);
	else
	{
		superClassObj = obj;
		((MyStruct)currentClassObj.getType()).superClass = superClassObj;
		for (Obj o : superClassObj.getType().getMembers())
		{
			Obj newObj = insertSymbol(o.getKind(), o.getName(), o.getType(), superClassNameleft);
			newObj.setAdr(o.getAdr());
			newObj.setFpPos(o.getFpPos());

			SymbolDataStructure newSymbols = new HashTableDataStructure();
			for (Obj loc : o.getLocalSymbols())
				newSymbols.insertKey(loc);
			newObj.setLocals(newSymbols);
			((MyObj)newObj).isInherited = true;
		}
	}
:};
ExtendsOpt ::= error:e {: parser.reportRecoveredSyntaxError("Error in extension", eleft); :};
ExtendsOpt ::= /* epsilon */;

FieldsDeclOpt ::= FieldsDeclList
{:
	if (currentClassObj != MyTab.noObj)
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());
:};
FieldsDeclOpt ::= /* epsilon */;

FieldsDeclList ::= FieldDeclLine FieldsDeclList;
FieldsDeclList ::= FieldDeclLine;
FieldsDeclList ::= error:e {: parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); :};
FieldsDeclList ::= error:e SEMI {: parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); :};

FieldDeclLine ::= Type VarDeclSequence SEMI;

ClassMethodDeclOpt ::= LBRACE MethodDeclOpt RBRACE;
ClassMethodDeclOpt ::= /* epsilon */;

// ==============================
// ======== Method rules ========
// ==============================
/* 38  */ MethodDeclOpt ::= MethodDeclList;
/* 39  */ MethodDeclOpt ::= /* epsilon */;

/* 40  */ MethodDeclList ::= MethodDeclList MethodDecl;
/* 41  */ MethodDeclList ::= MethodDecl;

/* 42  */ MethodDecl ::= RetType MethodName:methObj LPAREN FormalParamsOpt RPAREN LocalVarDeclOpt LBRACE MethodStart StatementListOpt RBRACE
{:
	if (currentMethodObj != MyTab.noObj)
	{
		if (!isVoid && !returnFound)
			parser.reportSemanticError("No return statement in method " + methObj.getName(), methObjleft);
		else if (isVoid && returnFound)
			parser.reportSemanticError("Return statement in void method " + methObj.getName(), methObjleft);
		else if (isVoid && !voidReturnFound)
		{	
			MyCode.put(MyCode.exit);
			MyCode.put(MyCode.return_);
		}
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
		MyTab.closeScope();
		parser.log.debug("**** Method \"" + methObj.getName() + "\" scope closed");
	}
	formalParamsCnt = 0;
	declKind = Obj.NO_VALUE;
	currentMethodObj = MyTab.noObj;
	retType = MyTab.noType;
	returnFound = false;
	voidReturnFound = false;
:};

MethodStart ::= /* epsilon */
{:
	currentMethodObj.setAdr(MyCode.pc);
	if (currentMethodObj.getName().equals("main"))
		MyCode.mainPc = MyCode.pc;
	int forParsCnt = (classContext) ? formalParamsCnt + 1 : formalParamsCnt;
	currentMethodObj.setLevel(forParsCnt);
	MyCode.put(MyCode.enter);
	MyCode.put(currentMethodObj.getLevel());
	MyCode.put(MyTab.currentScope().getnVars());
:};

/* 50  */ RetType ::= VOID {: isVoid = true; :};
/* 51  */ RetType ::= IDENT:retTypeName
{:
	Obj retObj = MyTab.find(retTypeName);
	isVoid = false;
	
	if (retObj == null || retObj == MyTab.noObj)
		parser.reportSemanticError("Return type " + retTypeName + "undefined", retTypeNameleft);
	else
		if (retObj.getKind() != Obj.Type)
			parser.reportSemanticError("Return identifier " + retTypeName + " is not a type", retTypeNameleft);
		else
			retType = retObj.getType();
:};

/* 129 */ MethodName ::= IDENT:methodName
{:
	RESULT = insertSymbol(Obj.Meth, methodName, retType, methodNameleft);
	currentMethodObj = RESULT;
	
	if (RESULT != MyTab.noObj)
	{
		if (methodName.equals("main"))
		{
			mainFound = true;
			if (!isVoid)
				parser.reportSemanticError("Method \"main\" must return void", methodNameleft);
		}
		MyTab.openScope(RESULT);
		parser.log.debug("**** Method \"" + methodName + "\" scope opened");
		declKind = Obj.Var;
		if (classContext)
			insertSymbol(Obj.Var, "this", currentClassObj.getType(), methodNameleft);
	}
:};

// =====================================
// ======== Formal params rules ========
// =====================================

/* 52  */ FormalParamsOpt ::= FormalParamsList;
/* 53  */ FormalParamsOpt ::= /* epsilon */;

/* 54  */ FormalParamsList ::= FormalParamsList COMMA FormalParam;
/* 55  */ FormalParamsList ::= FormalParam;
/* 56  */ FormalParam ::= error:e {: parser.reportRecoveredSyntaxError("Wrong declaration of formal parameters", eleft); :};

/* 57  */ FormalParam ::= Type:typeObj IDENT:paramName
{:
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, typeObj.getType(), paramNameleft);
		formalParamsCnt++;
	}
:};
/* 58  */ FormalParam ::= Type:typeObj IDENT:paramName LBRACKET RBRACKET
{:
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, new MyStruct(Struct.Array, typeObj.getType()), paramNameleft);
		formalParamsCnt++;
	}	
:};

// =================================
// ======== Local var rules ========
// =================================
/* 43  */ LocalVarDeclOpt ::= LocalVarDeclList;
/* 44  */ LocalVarDeclOpt ::= /* epsilon */;

/* 45  */ LocalVarDeclList ::= LocalVarDeclLine LocalVarDeclList;
/* 46  */ LocalVarDeclList ::= LocalVarDeclLine;
/* 47  */ LocalVarDeclList ::= IDENT error:e SEMI {: parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); :};
/* 48  */ LocalVarDeclList ::= error:e {: parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); :};

/* 49  */ LocalVarDeclLine ::= Type VarDeclSequence SEMI;


// =================================
// ======== Statement rules ========
// =================================
StatementListOpt ::= StatementList;
StatementListOpt ::= /* epsilon */;

StatementList ::= StatementList Statement;
StatementList ::= Statement;

Statement ::= OpenStatement;
Statement ::= ClosedStatement;

OpenStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin Statement PatchEnd {: jumpContextStack.pop(); :};
OpenStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin ClosedStatement JumpEnd ELSE PatchEnd OpenStatement PatchElseEnd;
OpenStatement ::= PushJumpContext LoopKeyword LPAREN BigCondition RPAREN PatchBegin OpenStatement PatchEnd
{:
	jumpContextStack.pop();
:};

ClosedStatement ::= SimpleStatement;
ClosedStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin ClosedStatement JumpEnd ELSE PatchEnd ClosedStatement PatchElseEnd;
ClosedStatement ::= PushJumpContext LoopKeyword LPAREN BigCondition RPAREN PatchBegin ClosedStatement PatchEnd
{:
	jumpContextStack.pop();
:};

LoopKeyword ::= WHILE
{:
	jumpContextStack.peek().isWhile = true;
	jumpContextStack.peek().top = MyCode.pc;
	//inWhile = true;
	whileCnt++;
:};

PushJumpContext ::= /* epsilon */
{:
	jumpContextStack.push(new JumpContext());
:};

PatchBegin ::= /* epsilon */
{:	
			
	JumpContext myJump = jumpContextStack.peek();
	JumpContext temp = null;
	if (myJump.isAndSubcontext)
	{
		temp = jumpContextStack.pop();
		myJump = jumpContextStack.peek();
	}
	if (myJump.hasOr)
	{
		MyCode.putJump(0);
		myJump.endPatches.add(MyCode.pc - 2);
	}
	for (Integer addr : myJump.beginPatches)
		MyCode.fixup(addr);
	if (temp != null)
		jumpContextStack.push(temp);
:};

PatchEnd ::= /* epsilon */
{:
	JumpContext myJump = jumpContextStack.peek();
	boolean isAndSubcontext = myJump.isAndSubcontext;
	if (myJump.isWhile)
	{
		//inWhile = false;
		whileCnt--;
		MyCode.putJump(myJump.top);
	}
	for (Integer addr : myJump.endPatches)
		MyCode.fixup(addr);
	if (isAndSubcontext)
		jumpContextStack.pop();
:};

JumpEnd ::= /* epsilon */
{:
	MyCode.putJump(0);
	JumpContext tmp = null;
	if (jumpContextStack.peek().isAndSubcontext)
		tmp = jumpContextStack.pop();
	jumpContextStack.peek().ifElsePatch = MyCode.pc - 2;
	if (tmp != null)
		jumpContextStack.push(tmp);
:};

PatchElseEnd ::= /* epsilon */
{:
	MyCode.fixup(jumpContextStack.peek().ifElsePatch);
	jumpContextStack.pop();
:};

Condition ::= Condition:opl LOR
{:
		if (opl != MyCode.checked)
		{
			jumpContextStack.peek().isOrSubcontext = true;
			if (opl == MyCode.noRelop)
			{
				MyCode.loadConst(1);
				MyCode.putFalseJump(MyCode.ne, 0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
			}
			else
			{
				MyCode.putFalseJump(MyCode.inverse[opl], 0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
			}
		}
		else
		{
			if (jumpContextStack.peek().isAndSubcontext)
			{
				JumpContext myJump = jumpContextStack.pop();
				MyCode.putJump(0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
				for (Integer addr : myJump.endPatches)
					MyCode.fixup(addr);
			}
		}
:}
CondTerm:opr
{:
	RESULT = MyCode.checked;
	JumpContext tmp = null;
	if (jumpContextStack.peek().isAndSubcontext)
		tmp = jumpContextStack.pop();
	if (opr != MyCode.checked)
	{
		jumpContextStack.peek().hasOr = true;
		if (opr == MyCode.noRelop)
		{
			MyCode.loadConst(1);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(MyCode.inverse[opr], 0);
			jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
		}
	}
	else
		jumpContextStack.peek().hasOr = false;
	if (tmp != null)
		jumpContextStack.push(tmp);
:};



BigCondition ::= Condition:op
{: 
	RESULT = op;
	if (!(jumpContextStack.peek().isOrSubcontext || jumpContextStack.peek().isAndSubcontext))
	{
		if (op == MyCode.noRelop)
		{
			MyCode.loadConst(1);
			MyCode.putFalseJump(MyCode.eq, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(op, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}
:};

Condition ::= CondTerm:op
{: 
	RESULT = op;
:};
Condition ::= error:e {: parser.reportRecoveredSyntaxError("Wrong condition expression", eleft); :};

CondTerm ::= CondTerm:opl LAND
{:
	if (!jumpContextStack.peek().isAndSubcontext)
	{
		JumpContext newJumpContext = new JumpContext();
		newJumpContext.isWhile = jumpContextStack.peek().isWhile;
		newJumpContext.top = jumpContextStack.peek().top;
		jumpContextStack.push(newJumpContext);
		jumpContextStack.peek().isAndSubcontext = true;
	}
	if (opl != MyCode.checked)
	{
		if (opl == MyCode.noRelop)
		{
			MyCode.loadConst(0);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(opl, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}
:}
CondFact:opr
{:
	RESULT = MyCode.checked;
	
	if (opr != MyCode.checked)
	{
		if (opr == MyCode.noRelop)
		{
			MyCode.loadConst(0);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(opr, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}
:};
CondTerm ::= CondFact:op {: RESULT = op; :};
			 
CondFact ::= Expr:leftInfo Relop:op Expr:rightInfo
{:
	if (!leftInfo.type.compatibleWith(rightInfo.type))
		parser.reportSemanticError("Expressions not compatible", rightInfoleft);
	else if ((leftInfo.type.getKind() == Struct.Class || leftInfo.type.getKind() == Struct.Array) && (!(op.equals(MyCode.ne) || op.equals(MyCode.eq))))
		parser.reportSemanticError("Only != and == operators allowed on class and array types", leftInfoleft);
	else
	{
		if (leftInfo.type.equals(MyTab.stringType))
		{
			Obj strEqObj = MyTab.find("_stringEquals");
			int addr = strEqObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(addr);
			RESULT = MyCode.noRelop;
		}
		else
			RESULT = op;
	}
:};
CondFact ::= Expr:exprInfo
{:
	if (!exprInfo.type.equals(MyTab.boolType))
		parser.reportSemanticError("Expression must be of boolean type", exprInfoleft);
	else
		RESULT = MyCode.noRelop;
:};


SimpleStatement ::= Designator:desigInfo ASSIGN Expr:exInfo SEMI
{:
	if (desigInfo.obj.getKind() != Obj.Var && desigInfo.obj.getKind() != Obj.Fld && desigInfo.obj.getKind() != Obj.Elem)
    {
    	parser.reportSemanticError("Incorrect assignement, destination must be a variable, an element of array or a field", exInfoleft);
    }
	else
	{
		Struct destType, srcType;
		destType = desigInfo.getType();
		srcType = exInfo.type;	
						
		if (!srcType.compatibleWith(destType))
		{
			if (!(srcType instanceof MyStruct && ((MyStruct)srcType).superClass.getType().compatibleWith(destType)))
				parser.reportSemanticError("Destination and source type must be compatibile",exInfoleft);
		}
		else
		{
			MyCode.store(desigInfo.obj);
		}
	}
:};
SimpleStatement ::= Designator:desigInfo ASSIGN error:e SEMI {: parser.reportRecoveredSyntaxError("Wrong assignment expression", eleft); :};
SimpleStatement ::= FuncCall:funcInfo SEMI
{:
	if (funcInfo.type != MyTab.noType)
	{
		MyCode.put(MyCode.pop);
	}
:};
SimpleStatement ::= Designator:desigInfo {: MyCode.load(desigInfo.obj); :} IncDec SEMI
{:
	if (!(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	else if (!desigInfo.getType().equals(MyTab.intType))
		parser.reportSemanticError("Unary inc/dec allowed only on integers", desigInfoleft);
	else
		MyCode.store(desigInfo.obj);

:};
IncDec ::= INC
{:
	MyCode.loadConst(1);
	MyCode.put(MyCode.add);
:};
IncDec ::= DEC
{:
	MyCode.loadConst(1);
	MyCode.put(MyCode.sub);
:};

SimpleStatement ::= BREAK:br SEMI
{:
	if (whileCnt == 0)//inWhile == false)
		parser.reportSemanticError("Break statement allowed only in while loop", brleft);
	else
	{
		MyCode.putJump(0);
		int i = jumpContextStack.size() - 1;
		while(jumpContextStack.get(i).isWhile == false)
			i--;
		jumpContextStack.get(i).endPatches.add(MyCode.pc - 2);
	}
:};
SimpleStatement ::= RETURN:r SEMI
{:
	voidReturnFound = true;
	if (!isVoid)
		parser.reportSemanticError("Method must return a value", rleft);
	else
	{
		MyCode.put(MyCode.exit);
		MyCode.put(MyCode.return_);
	}
:};
SimpleStatement ::= RETURN Expr:exprInfo SEMI
{:
	returnFound = true;
	
	if (!isVoid && (retType == null || !retType.equals(exprInfo.type)))
	{
		parser.reportSemanticError("Expresion type doesn't match method return type", exprInfoleft);
	}
	else
	{
		MyCode.put(MyCode.exit);
		MyCode.put(MyCode.return_);
	}
:};

SimpleStatement ::= READ LPAREN Designator:desigInfo RPAREN SEMI
{:
	if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	else if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getType().equals(MyTab.intType) || desigInfo.obj.getType().equals(MyTab.charType) || desigInfo.obj.getType().equals(MyTab.boolType) || desigInfo.obj.getType().equals(MyTab.stringType)))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a of int, char, bool or string type", desigInfoleft);
	else
	{
		if (desigInfo.obj.getType().equals(MyTab.intType))
		{
			MyCode.put(MyCode.read);
			MyCode.store(desigInfo.obj);
		}
		else if (desigInfo.obj.getType().equals(MyTab.charType))
		{
			MyCode.put(MyCode.bread);
			MyCode.store(desigInfo.obj);
		}
		else if (desigInfo.obj.getType().equals(MyTab.stringType))
		{
			Obj readStrObj = MyTab.find("_readString");
			int offset = readStrObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(offset);
			MyCode.store(desigInfo.obj);
		}
	}
:};

SimpleStatement ::= READ LPAREN error:e RPAREN SEMI {: parser.reportRecoveredSyntaxError("Read function call error", eleft); :};
SimpleStatement ::= PRINT LPAREN Expr:exprInfo RPAREN SEMI
{:
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}
	else
	{
		if (exprInfo.type == MyTab.intType)
		{
			MyCode.loadConst(10);
			MyCode.put(MyCode.print);
		}
		else if (exprInfo.type == MyTab.charType)
		{
			MyCode.loadConst(1);
			MyCode.put(MyCode.bprint);
		}
		else if (exprInfo.type == MyTab.stringType)
		{
			Obj printStrObj = MyTab.find("_printString");
			int offset = printStrObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(offset);
		}
	}
:};

SimpleStatement ::= PRINT LPAREN error:e RPAREN SEMI {: parser.reportRecoveredSyntaxError("Print function call error", eleft); :};
SimpleStatement ::= PRINT LPAREN Expr:exprInfo COMMA NUMBER:num RPAREN SEMI
{:
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}
	else
	{
		if (exprInfo.type == MyTab.intType)
		{
			MyCode.loadConst(num);
			MyCode.put(MyCode.print);
		}
		else if (exprInfo.type == MyTab.charType)
		{
			MyCode.loadConst(num);
			MyCode.put(MyCode.bprint);
		}
	}
:};
SimpleStatement ::= PRINT LPAREN error:e COMMA NUMBER RPAREN SEMI {: parser.reportRecoveredSyntaxError("Print function call error", eleft); :};
SimpleStatement ::= LBRACE StatementListOpt RBRACE;

// =====================================
// ======== Function call rules ========
// =====================================

FuncCall ::= CallName:callInfo LPAREN:l ActualParamsOpt RPAREN
{:
	RESULT = new Info(0, currentMethodCallObj.getType());
	
	int forParsCnt = (isThisCall) ? currentMethodCallObj.getLevel() - 1 : currentMethodCallObj.getLevel();

	if (currentActualParam < forParsCnt)
		parser.reportSemanticError("Insufficient number of arguments", lleft);
	else
	{
		int offset = callInfo.obj.getAdr() - MyCode.pc;
		MyCode.put(MyCode.call);
		MyCode.put2(offset);
	}
:};
FuncCall ::= CallName LPAREN  error:e SEMI {: parser.reportRecoveredSyntaxError("Wrong function call", eleft); :};
CallName ::= Designator:desigInfo
{:
	currentActualParam = 0;
	isThisCall = false;
	if (desigInfo.obj != MyTab.noObj && desigInfo.obj.getKind() != Obj.Meth)
	{
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a global function or a method", desigInfoleft);
		//RESULT = new Info(0, MyTab.noType);
		currentMethodCallObj = MyTab.noObj;
	}
	else
	{
		currentMethodCallObj = desigInfo.obj;
		Struct methType = desigInfo.obj.getType();
		if (desigInfo.isClassMember)
			isThisCall = true;
		//RESULT = new Info(0, methType);
	}
	RESULT = desigInfo;
:};


ActualParamsOpt ::= ActualParamsList;
ActualParamsOpt ::= /* epsilon */;
ActualParamsOpt ::= error:e {: parser.reportRecoveredSyntaxError("Wrong actual parameters in function call", eleft); :};

ActualParamsList ::= ActualParamsList COMMA ActualParam;
ActualParamsList ::= ActualParam;
ActualParam ::= Expr:exprInfo
{:
	if (currentMethodCallObj != MyTab.noObj)
	{
		int forParsCnt = (isThisCall) ? currentMethodCallObj.getLevel() - 1 : currentMethodCallObj.getLevel();
		if (currentActualParam + 1 > forParsCnt)
		{
			parser.reportSemanticError("To many arguments", exprInfoleft);
		}
		else
		{
			Obj paramObj = null;
			Iterator<Obj> it = currentMethodCallObj.getLocalSymbols().iterator();
			if (isThisCall)
				it.next();
			for (int i = 0; i <= currentActualParam; ++i)
				paramObj = it.next();
			if (exprInfo.type != MyTab.noType && !paramObj.getType().compatibleWith(exprInfo.type)
				&& !(exprInfo.type.getKind() == Struct.Array && paramObj.getType().getKind() == Struct.Array && paramObj.getType().getElemType() == MyTab.noType))
			{
				parser.reportSemanticError("Actual parameter on position " + currentActualParam + ". type (" + MyTab.getTypeName(exprInfo.type)
										 + ") doesn't match with formal parameter type (" + MyTab.getTypeName(paramObj.getType()) + ")", exprInfoleft);
			}
		}
		currentActualParam++;
	}
:};

// ==================================
// ======== Designator rules ========
// ==================================
Designator ::= DesignatorName DesignatorListOpt
{:
	RESULT = designatorChainsStack.pop();
	
:};
DesignatorName ::= IDENT:desigName
{:
	Obj designatorObj = MyTab.find(desigName);
	if (designatorObj == null || designatorObj == MyTab.noObj)
	{
		parser.reportSemanticError("Identifier " + desigName + " undefined", desigNameleft);
		designatorChainsStack.push(new DesignatorInfo(MyTab.noObj));
	}
	else
	{
		designatorChainsStack.push(new DesignatorInfo(designatorObj));
		if (designatorTop().obj instanceof MyObj && ((MyObj)designatorTop().obj).isClassMember)
				designatorTop().isClassMember = true;
	}
:};

DesignatorListOpt ::= DesignatorList;
DesignatorListOpt ::= /* epsilon */;

DesignatorList ::= DesignatorList DesignatorPart;
DesignatorList ::= DesignatorPart;

DesignatorPart ::= DOT IDENT:desigName
{:
	if (designatorTop().obj != MyTab.noObj)
	{
		if (designatorTop().obj.getType().getKind() != Struct.Class)
			parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not of class type", desigNameleft);
		else
		{
			designatorTop().designatorStart = false;
			Obj desigObj = MyTab.noObj;
			boolean found = false;
			for (Obj o : designatorTop().obj.getType().getMembers())
			{
				if (o.getName().equals(desigName))
				{
					desigObj = o;
					found = true;
					break;
				}
			}
			
			if (!found)
			{
				String className = MyTab.getTypeName(designatorTop().obj.getType());
				parser.reportSemanticError("Identifier " + desigName + " is not a member of the class " + className, desigNameleft);
			}
			else
			{
				designatorTop().obj = desigObj;
				designatorTop().isClassMember = true;
			}
		}
	}
:};

DesignatorPart ::= LBRACKET ArrayAddr Expr:exprInfo RBRACKET
{:
	if (designatorTop().obj.getType().getKind() != Struct.Array)
		parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not an array", exprInfoleft);
	else
	{
		if (!exprInfo.type.equals(MyTab.intType))
			parser.reportSemanticError("Index expression is not of int type", exprInfoleft);
		else
		{
			designatorTop().obj = new MyObj(MyObj.Elem, "tempObj_elem", designatorTop().obj.getType().getElemType());
			designatorTop().isElementOfArray = true;
		}
	}
:};

ArrayAddr ::= /* epsilon */
{:
	if (designatorTop().designatorStart)
		MyCode.load(designatorTop().obj);
:};
DesignatorPart ::= LBRACKET error:e RBRACKET {: parser.reportRecoveredSyntaxError("Wrong index expression", eleft); :};

// ==================================
// ======== Expression rules ========
// ==================================
Expr ::= SUB {: negation = true; :} TermList:termListInfo
{:
	if (!termListInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Unary negation operator allowed only on int type", termListInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = termListInfo;
:};

Expr ::= TermList:termListInfo
{:
	RESULT = termListInfo;
:};

TermList ::= TermList:leftInfo Addop:opString Term:rightInfo
{:
	if (leftInfo.type.equals(MyTab.intType) && rightInfo.type.equals(MyTab.intType) ||
		leftInfo.type.equals(MyTab.stringType) && rightInfo.type.equals(MyTab.stringType) && opString.equals("+"))
	{
		if (opString.equals("+"))
		{
			if (leftInfo.type.equals(MyTab.stringType))
			{
				Obj strAddObj = MyTab.find("_addStrings");
				int offset = strAddObj.getAdr() - MyCode.pc;
				MyCode.put(MyCode.call);
				MyCode.put2(offset);
			}
			else
				MyCode.put(MyCode.add);
		}
		else
			MyCode.put(MyCode.sub);
		RESULT = new Info(0, leftInfo.type);
	}
	else
	{
		RESULT = new Info(0, MyTab.noType);
		if (opString.equals("+"))
			parser.reportSemanticError("Operator " + opString + " allowed only on string and int operands", leftInfoleft);
		else
			parser.reportSemanticError("Operator " + opString + " allowed only on int operands", leftInfoleft);
	}
:};

TermList ::= Term:termInfo
{:
	RESULT = termInfo;
:};

Term ::= Term:termInfo Mulop:opString Factor:factorInfo
{:
	if (!(factorInfo.type.equals(MyTab.intType) && termInfo.type.equals(MyTab.intType)))
	{
		parser.reportSemanticError("Operator " + opString + " allowed only on int type", termInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
	{
		if (opString.equals("*"))
			MyCode.put(MyCode.mul);
		else if (opString.equals("/"))
			MyCode.put(MyCode.div);
		else
			MyCode.put(MyCode.rem);
		RESULT = new Info(0, MyTab.intType);
	}
:};

Term ::= Factor:factorInfo
{:
	if (negation)
	{
		negation = false;
		MyCode.put(MyCode.neg);
	}
	RESULT = factorInfo;
:};

Factor ::= Designator:desigInfo
{:
	MyCode.load(desigInfo.obj);
	RESULT = new Info(0, desigInfo.getType());
:};

Factor ::= FuncCall:funcCallInfo
{:
	RESULT = funcCallInfo;
:};

Factor ::= Value:valueInfo
{:
	//if (valueInfo.type == MyTab.stringType)
		//MyCode.bload(new Obj(Obj.Con, "tempConst_" + valueInfo.value.toString(), valueInfo.type, valueInfo.getIntVal(), -2));
	//else
		MyCode.load(new Obj(Obj.Con, "tempConst_" + valueInfo.value.toString(), valueInfo.type, valueInfo.getIntVal(), -2));
	RESULT = valueInfo;
:};

Factor ::= NEW IDENT:typeName
{:
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type || typeObj.getType().getKind() != Struct.Class)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a class name", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, typeObj.getType());
:};

Factor ::= NEW IDENT:typeName LBRACKET Expr:exprInfo RBRACKET
{:
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else if (!exprInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Expression must be of int type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
	{
		MyCode.put(MyCode.newarray);
		if (typeName.equals("char"))
			MyCode.put(0);
		else
			MyCode.put(1);
		RESULT = new Info(0, new MyStruct(Struct.Array, typeObj.getType()));
	}
:};

Factor ::= NEW IDENT LBRACKET error:e RBRACKET {: parser.reportRecoveredSyntaxError("Wrong allocation expression", eleft); :};

Factor ::= LPAREN Expr:exprInfo RPAREN
{:
	RESULT = exprInfo;
:};

Addop ::= ADD {: RESULT = "+"; :};
Addop ::= SUB {: RESULT = "-"; :};

Mulop ::= MUL {: RESULT = "*"; :};
Mulop ::= DIV {: RESULT = "/"; :};
Mulop ::= MOD {: RESULT = "%"; :};
		 
Relop ::= EQ {: RESULT = MyCode.eq; :};
Relop ::= NEQ {: RESULT = MyCode.ne; :};
Relop ::= GRT {: RESULT = MyCode.gt; :};
Relop ::= GRTE {: RESULT = MyCode.ge; :};
Relop ::= LESS {: RESULT = MyCode.lt; :};
Relop ::= LESSE {: RESULT = MyCode.le; :};

Value ::= NUMBER:value 		{: RESULT = new Info(value, MyTab.intType); :};
Value ::= CHAR_CONST:value 	{: RESULT = new Info(value, MyTab.charType); :};
Value ::= BOOL_CONST:value 	{: RESULT = new Info(value, MyTab.boolType); :};
Value ::= STRING_CONST:value 
{: 
	int size = value.length() + 1;
	MyCode.heapPutWord(size);
	int addr = MyCode.heapSize;
	for (int i = 0; i < value.length(); ++i)
		MyCode.heapPutByte((byte)((int)value.charAt(i)));
	MyCode.heapPutByte((byte)0);
				
	RESULT = new Info(addr, MyTab.stringType);
:};

Type ::= IDENT:typeName
{:
	Obj typeObjNode = MyTab.find(typeName);
	if (typeObjNode == null || typeObjNode == MyTab.noObj)
	{
		parser.reportSemanticError("Type " + typeName + " undefined", typeNameleft);
		RESULT = MyTab.noObj;
	}
	else
	{
		if (typeObjNode.getKind() == Obj.Type)
			RESULT = typeObjNode;
		else
		{
			parser.reportSemanticError(typeName + " is not a type", typeNameleft);
			RESULT = MyTab.noObj;
		}
	}
	currentDeclTypeObj = RESULT;
:};



