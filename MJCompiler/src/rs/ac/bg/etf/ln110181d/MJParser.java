
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 02 23:30:53 CEST 2015
//----------------------------------------------------

package rs.ac.bg.etf.ln110181d;

import java_cup.runtime.*;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.ln110181d.util.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.*;
import rs.etf.pp1.symboltable.structure.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 02 23:30:53 CEST 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\004\003\000\002\004\002\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\007\006\000\002\007\005\000\002" +
    "\010\005\000\002\010\003\000\002\011\003\000\002\011" +
    "\005\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\076\002\000\002\013\006\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\023\005\000\002\023\003\000\002\024\003\000\002\024" +
    "\005\000\002\040\011\000\002\043\003\000\002\041\004" +
    "\000\002\041\003\000\002\041\002\000\002\020\003\000" +
    "\002\020\002\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\004\000\002\022\005\000\002\042" +
    "\005\000\002\042\002\000\002\025\003\000\002\025\002" +
    "\000\002\026\004\000\002\026\003\000\002\027\013\000" +
    "\002\030\003\000\002\030\003\000\002\037\003\000\002" +
    "\031\003\000\002\031\002\000\002\032\005\000\002\032" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\006" +
    "\000\002\015\003\000\002\015\002\000\002\016\004\000" +
    "\002\016\003\000\002\016\005\000\002\016\003\000\002" +
    "\017\005\000\002\045\003\000\002\045\002\000\002\046" +
    "\004\000\002\046\003\000\002\044\003\000\002\044\003" +
    "\000\002\047\007\000\002\047\011\000\002\047\007\000" +
    "\002\050\003\000\002\050\011\000\002\050\007\000\002" +
    "\075\003\000\002\063\005\000\002\063\003\000\002\063" +
    "\003\000\002\064\005\000\002\064\003\000\002\065\005" +
    "\000\002\065\003\000\002\074\003\000\002\074\003\000" +
    "\002\051\006\000\002\051\006\000\002\051\004\000\002" +
    "\051\005\000\002\051\004\000\002\051\004\000\002\051" +
    "\005\000\002\051\007\000\002\051\007\000\002\051\007" +
    "\000\002\051\007\000\002\051\011\000\002\051\011\000" +
    "\002\051\005\000\002\071\006\000\002\071\006\000\002" +
    "\073\003\000\002\034\003\000\002\034\002\000\002\034" +
    "\003\000\002\035\005\000\002\035\003\000\002\036\003" +
    "\000\002\052\004\000\002\054\003\000\002\055\003\000" +
    "\002\055\002\000\002\056\004\000\002\056\003\000\002" +
    "\053\004\000\002\053\005\000\002\053\005\000\002\057" +
    "\004\000\002\057\003\000\002\061\005\000\002\061\003" +
    "\000\002\060\005\000\002\060\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\004\000\002" +
    "\062\007\000\002\062\007\000\002\062\005\000\002\066" +
    "\003\000\002\066\003\000\002\067\003\000\002\067\003" +
    "\000\002\067\003\000\002\070\003\000\002\070\003\000" +
    "\002\070\003\000\002\070\003\000\002\070\003\000\002" +
    "\070\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\004\005\001\002\000\004\002\360\001" +
    "\002\000\004\021\007\001\002\000\012\006\020\010\021" +
    "\021\011\055\ufffd\001\002\000\012\006\uffff\010\uffff\021" +
    "\uffff\055\uffff\001\002\000\006\003\uffed\021\uffed\001\002" +
    "\000\006\003\uff72\021\uff72\001\002\000\012\006\ufffa\010" +
    "\ufffa\021\ufffa\055\ufffa\001\002\000\012\006\ufff9\010\ufff9" +
    "\021\ufff9\055\ufff9\001\002\000\012\006\ufff8\010\ufff8\021" +
    "\ufff8\055\ufff8\001\002\000\012\006\ufffb\010\ufffb\021\ufffb" +
    "\055\ufffb\001\002\000\012\006\020\010\021\021\011\055" +
    "\ufffe\001\002\000\004\055\345\001\002\000\004\021\043" +
    "\001\002\000\006\003\023\021\011\001\002\000\006\003" +
    "\026\021\030\001\002\000\004\046\024\001\002\000\012" +
    "\006\ufff6\010\ufff6\021\ufff6\055\ufff6\001\002\000\006\046" +
    "\ufff4\047\ufff4\001\002\000\006\046\ufff3\047\ufff3\001\002" +
    "\000\006\046\040\047\037\001\002\000\004\045\031\001" +
    "\002\000\012\022\035\023\036\024\034\025\032\001\002" +
    "\000\044\026\uffee\027\uffee\030\uffee\031\uffee\032\uffee\035" +
    "\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\046\uffee\047\uffee\052\uffee\054\uffee\001\002\000" +
    "\006\046\ufff2\047\ufff2\001\002\000\044\026\uffef\027\uffef" +
    "\030\uffef\031\uffef\032\uffef\035\uffef\036\uffef\037\uffef\040" +
    "\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047\uffef" +
    "\052\uffef\054\uffef\001\002\000\044\026\ufff1\027\ufff1\030" +
    "\ufff1\031\ufff1\032\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1\047\ufff1\052" +
    "\ufff1\054\ufff1\001\002\000\044\026\ufff0\027\ufff0\030\ufff0" +
    "\031\ufff0\032\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\044\ufff0\046\ufff0\047\ufff0\052\ufff0" +
    "\054\ufff0\001\002\000\006\003\026\021\030\001\002\000" +
    "\012\006\ufff7\010\ufff7\021\ufff7\055\ufff7\001\002\000\006" +
    "\046\ufff5\047\ufff5\001\002\000\010\003\046\020\045\055" +
    "\uffe0\001\002\000\010\003\uffe3\020\uffe3\055\uffe3\001\002" +
    "\000\004\055\050\001\002\000\004\021\047\001\002\000" +
    "\004\055\uffe1\001\002\000\004\055\uffe2\001\002\000\012" +
    "\003\054\021\011\055\uffde\056\uffde\001\002\000\012\003" +
    "\054\021\011\055\uffdc\056\uffdc\001\002\000\006\055\uffdf" +
    "\056\uffdf\001\002\000\004\021\324\001\002\000\010\046" +
    "\341\055\uffdb\056\uffdb\001\002\000\006\055\056\056\uffd7" +
    "\001\002\000\010\016\066\021\065\056\uffd5\001\002\000" +
    "\004\056\060\001\002\000\012\006\uffe4\010\uffe4\021\uffe4" +
    "\055\uffe4\001\002\000\010\016\066\021\065\056\uffd6\001" +
    "\002\000\004\056\337\001\002\000\004\021\067\001\002" +
    "\000\010\016\uffd3\021\uffd3\056\uffd3\001\002\000\004\021" +
    "\uffd0\001\002\000\004\021\uffd1\001\002\000\004\051\uffcf" +
    "\001\002\000\004\051\071\001\002\000\010\003\073\021" +
    "\011\052\uffcd\001\002\000\004\021\334\001\002\000\006" +
    "\047\uffca\052\uffca\001\002\000\006\047\uffcb\052\uffcb\001" +
    "\002\000\006\047\332\052\uffce\001\002\000\004\052\077" +
    "\001\002\000\010\003\102\021\104\055\uffc6\001\002\000" +
    "\004\021\324\001\002\000\004\055\uffc7\001\002\000\004" +
    "\055\uffc2\001\002\000\004\055\111\001\002\000\006\003" +
    "\107\021\uff72\001\002\000\010\003\102\021\104\055\uffc4" +
    "\001\002\000\004\055\uffc5\001\002\000\004\046\110\001" +
    "\002\000\004\055\uffc3\001\002\000\024\005\125\011\120" +
    "\013\127\014\113\015\117\017\116\021\114\055\121\056" +
    "\uffbf\001\002\000\012\033\312\034\313\045\314\051\uff9a" +
    "\001\002\000\004\051\302\001\002\000\060\026\uff92\027" +
    "\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\001\002\000\024\005\uffbb\011\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\021\uffbb\055\uffbb\056\uffbb" +
    "\001\002\000\004\051\uffb4\001\002\000\024\012\152\021" +
    "\114\022\035\023\036\024\034\025\032\027\145\046\277" +
    "\051\144\001\002\000\004\051\267\001\002\000\024\005" +
    "\125\011\120\013\127\014\113\015\117\017\116\021\114" +
    "\055\121\056\uffbf\001\002\000\024\005\uffbc\011\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\055\uffbc\056\uffbc" +
    "\001\002\000\004\051\240\001\002\000\004\046\237\001" +
    "\002\000\004\046\236\001\002\000\060\026\uff90\027\uff90" +
    "\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\227\051\uff90\052\uff90\053" +
    "\226\054\uff90\001\002\000\004\051\204\001\002\000\024" +
    "\005\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021" +
    "\uffbd\055\uffbd\056\uffbd\001\002\000\004\056\203\001\002" +
    "\000\004\051\136\001\002\000\026\005\uffb7\007\uffb7\011" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\017\uffb7\021\uffb7\055\uffb7" +
    "\056\uffb7\001\002\000\024\005\125\011\120\013\127\014" +
    "\113\015\117\017\116\021\114\055\121\056\uffc0\001\002" +
    "\000\024\005\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017" +
    "\uffbe\021\uffbe\055\uffbe\056\uffbe\001\002\000\026\003\150" +
    "\012\152\021\114\022\035\023\036\024\034\025\032\027" +
    "\145\051\144\052\uff98\001\002\000\046\026\uff84\027\uff84" +
    "\030\uff84\031\uff84\032\uff84\035\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\046\uff84\047\uff84" +
    "\051\uff9a\052\uff84\054\uff84\001\002\000\044\026\uff85\027" +
    "\uff85\030\uff85\031\uff85\032\uff85\035\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\046\uff85\047" +
    "\uff85\052\uff85\054\uff85\001\002\000\006\047\uff95\052\uff95" +
    "\001\002\000\006\047\201\052\uff99\001\002\000\006\047" +
    "\uff94\052\uff94\001\002\000\022\012\152\021\114\022\035" +
    "\023\036\024\034\025\032\027\145\051\144\001\002\000" +
    "\020\012\152\021\114\022\035\023\036\024\034\025\032" +
    "\051\144\001\002\000\044\026\uff83\027\uff83\030\uff83\031" +
    "\uff83\032\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\046\uff83\047\uff83\052\uff83\054" +
    "\uff83\001\002\000\004\052\175\001\002\000\006\046\174" +
    "\052\uff97\001\002\000\036\026\171\027\170\035\uff89\036" +
    "\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\046\uff89\047\uff89\052\uff89\054\uff89\001\002\000\004\021" +
    "\162\001\002\000\044\026\uff87\027\uff87\030\156\031\157" +
    "\032\155\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042" +
    "\uff87\043\uff87\044\uff87\046\uff87\047\uff87\052\uff87\054\uff87" +
    "\001\002\000\044\026\uff82\027\uff82\030\uff82\031\uff82\032" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\043\uff82\044\uff82\046\uff82\047\uff82\052\uff82\054\uff82\001" +
    "\002\000\020\012\uff79\021\uff79\022\uff79\023\uff79\024\uff79" +
    "\025\uff79\051\uff79\001\002\000\020\012\uff7b\021\uff7b\022" +
    "\uff7b\023\uff7b\024\uff7b\025\uff7b\051\uff7b\001\002\000\020" +
    "\012\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\051" +
    "\uff7a\001\002\000\020\012\152\021\114\022\035\023\036" +
    "\024\034\025\032\051\144\001\002\000\044\026\uff86\027" +
    "\uff86\030\uff86\031\uff86\032\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\046\uff86\047" +
    "\uff86\052\uff86\054\uff86\001\002\000\046\026\uff81\027\uff81" +
    "\030\uff81\031\uff81\032\uff81\035\uff81\036\uff81\037\uff81\040" +
    "\uff81\041\uff81\042\uff81\043\uff81\044\uff81\046\uff81\047\uff81" +
    "\052\uff81\053\163\054\uff81\001\002\000\024\003\165\012" +
    "\152\021\114\022\035\023\036\024\034\025\032\027\145" +
    "\051\144\001\002\000\004\054\167\001\002\000\004\054" +
    "\166\001\002\000\044\026\uff7f\027\uff7f\030\uff7f\031\uff7f" +
    "\032\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042" +
    "\uff7f\043\uff7f\044\uff7f\046\uff7f\047\uff7f\052\uff7f\054\uff7f" +
    "\001\002\000\044\026\uff80\027\uff80\030\uff80\031\uff80\032" +
    "\uff80\035\uff80\036\uff80\037\uff80\040\uff80\041\uff80\042\uff80" +
    "\043\uff80\044\uff80\046\uff80\047\uff80\052\uff80\054\uff80\001" +
    "\002\000\020\012\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c" +
    "\025\uff7c\051\uff7c\001\002\000\020\012\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\051\uff7d\001\002\000\020" +
    "\012\152\021\114\022\035\023\036\024\034\025\032\051" +
    "\144\001\002\000\044\026\uff88\027\uff88\030\156\031\157" +
    "\032\155\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\046\uff88\047\uff88\052\uff88\054\uff88" +
    "\001\002\000\044\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\046\uff9b\047\uff9b\052\uff9b\054\uff9b\001" +
    "\002\000\044\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\046\uff9c\047\uff9c\052\uff9c\054\uff9c\001\002" +
    "\000\036\026\171\027\170\035\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\046\uff8a\047\uff8a" +
    "\052\uff8a\054\uff8a\001\002\000\004\052\200\001\002\000" +
    "\044\026\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\035\uff7e" +
    "\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e\044" +
    "\uff7e\046\uff7e\047\uff7e\052\uff7e\054\uff7e\001\002\000\022" +
    "\012\152\021\114\022\035\023\036\024\034\025\032\027" +
    "\145\051\144\001\002\000\006\047\uff96\052\uff96\001\002" +
    "\000\010\016\uffd2\021\uffd2\056\uffd2\001\002\000\024\003" +
    "\206\012\152\021\114\022\035\023\036\024\034\025\032" +
    "\027\145\051\144\001\002\000\006\047\215\052\216\001" +
    "\002\000\006\047\207\052\210\001\002\000\004\022\212" +
    "\001\002\000\004\046\211\001\002\000\026\005\uffa0\007" +
    "\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\017\uffa0\021\uffa0" +
    "\055\uffa0\056\uffa0\001\002\000\004\052\213\001\002\000" +
    "\004\046\214\001\002\000\026\005\uff9e\007\uff9e\011\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\017\uff9e\021\uff9e\055\uff9e\056" +
    "\uff9e\001\002\000\004\022\220\001\002\000\004\046\217" +
    "\001\002\000\026\005\uffa1\007\uffa1\011\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\017\uffa1\021\uffa1\055\uffa1\056\uffa1\001\002" +
    "\000\004\052\221\001\002\000\004\046\222\001\002\000" +
    "\026\005\uff9f\007\uff9f\011\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\017\uff9f\021\uff9f\055\uff9f\056\uff9f\001\002\000\054\026" +
    "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034\uff93" +
    "\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\051\uff93\052\uff93" +
    "\054\uff93\001\002\000\060\026\uff8e\027\uff8e\030\uff8e\031" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e\046" +
    "\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e" +
    "\001\002\000\060\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\227\051\uff91\052\uff91\053\226\054\uff91\001\002" +
    "\000\024\003\232\012\152\021\114\022\035\023\036\024" +
    "\034\025\032\027\145\051\144\001\002\000\004\021\230" +
    "\001\002\000\060\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032" +
    "\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\001\002" +
    "\000\004\054\234\001\002\000\004\054\233\001\002\000" +
    "\060\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\001\002\000\060\026" +
    "\uff8c\027\uff8c\030\uff8c\031\uff8c\032\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\001\002\000\060\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f" +
    "\053\uff8f\054\uff8f\001\002\000\026\005\uffa6\007\uffa6\011" +
    "\uffa6\013\uffa6\014\uffa6\015\uffa6\017\uffa6\021\uffa6\055\uffa6" +
    "\056\uffa6\001\002\000\026\005\uffa8\007\uffa8\011\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\017\uffa8\021\uffa8\055\uffa8\056\uffa8" +
    "\001\002\000\024\003\243\012\152\021\114\022\035\023" +
    "\036\024\034\025\032\027\145\051\144\001\002\000\010" +
    "\043\uffaf\044\uffaf\052\uffaf\001\002\000\024\035\255\036" +
    "\261\037\257\040\262\041\260\042\256\043\uffad\044\uffad" +
    "\052\uffad\001\002\000\004\052\uffb1\001\002\000\010\043" +
    "\252\044\251\052\uffb2\001\002\000\004\052\246\001\002" +
    "\000\022\005\125\011\120\013\127\014\113\015\117\017" +
    "\116\021\114\055\121\001\002\000\026\005\uffb5\007\uffb5" +
    "\011\uffb5\013\uffb5\014\uffb5\015\uffb5\017\uffb5\021\uffb5\055" +
    "\uffb5\056\uffb5\001\002\000\024\005\uffb8\011\uffb8\013\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\021\uffb8\055\uffb8\056\uffb8\001" +
    "\002\000\022\012\152\021\114\022\035\023\036\024\034" +
    "\025\032\027\145\051\144\001\002\000\022\012\152\021" +
    "\114\022\035\023\036\024\034\025\032\027\145\051\144" +
    "\001\002\000\010\043\uffb0\044\uffb0\052\uffb0\001\002\000" +
    "\006\043\252\052\uffb3\001\002\000\022\012\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\027\uff78\051\uff78\001" +
    "\002\000\022\012\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\027\uff73\051\uff73\001\002\000\022\012\uff76\021" +
    "\uff76\022\uff76\023\uff76\024\uff76\025\uff76\027\uff76\051\uff76" +
    "\001\002\000\022\012\uff74\021\uff74\022\uff74\023\uff74\024" +
    "\uff74\025\uff74\027\uff74\051\uff74\001\002\000\022\012\uff77" +
    "\021\uff77\022\uff77\023\uff77\024\uff77\025\uff77\027\uff77\051" +
    "\uff77\001\002\000\022\012\uff75\021\uff75\022\uff75\023\uff75" +
    "\024\uff75\025\uff75\027\uff75\051\uff75\001\002\000\022\012" +
    "\152\021\114\022\035\023\036\024\034\025\032\027\145" +
    "\051\144\001\002\000\010\043\uffae\044\uffae\052\uffae\001" +
    "\002\000\004\056\266\001\002\000\026\005\uff9d\007\uff9d" +
    "\011\uff9d\013\uff9d\014\uff9d\015\uff9d\017\uff9d\021\uff9d\055" +
    "\uff9d\056\uff9d\001\002\000\024\003\243\012\152\021\114" +
    "\022\035\023\036\024\034\025\032\027\145\051\144\001" +
    "\002\000\004\052\271\001\002\000\022\005\125\011\120" +
    "\013\127\014\113\015\117\017\116\021\114\055\121\001" +
    "\002\000\026\005\uffbb\007\274\011\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\055\uffbb\056\uffbb\001\002\000" +
    "\024\005\uffba\011\uffba\013\uffba\014\uffba\015\uffba\017\uffba" +
    "\021\uffba\055\uffba\056\uffba\001\002\000\022\005\125\011" +
    "\120\013\127\014\113\015\117\017\116\021\114\055\121" +
    "\001\002\000\026\005\uffb6\007\uffb6\011\uffb6\013\uffb6\014" +
    "\uffb6\015\uffb6\017\uffb6\021\uffb6\055\uffb6\056\uffb6\001\002" +
    "\000\024\005\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\017" +
    "\uffb9\021\uffb9\055\uffb9\056\uffb9\001\002\000\026\005\uffa5" +
    "\007\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\017\uffa5\021" +
    "\uffa5\055\uffa5\056\uffa5\001\002\000\004\046\301\001\002" +
    "\000\026\005\uffa4\007\uffa4\011\uffa4\013\uffa4\014\uffa4\015" +
    "\uffa4\017\uffa4\021\uffa4\055\uffa4\056\uffa4\001\002\000\006" +
    "\003\303\021\114\001\002\000\004\052\307\001\002\000" +
    "\004\052\305\001\002\000\004\046\306\001\002\000\026" +
    "\005\uffa3\007\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3\017" +
    "\uffa3\021\uffa3\055\uffa3\056\uffa3\001\002\000\004\046\310" +
    "\001\002\000\026\005\uffa2\007\uffa2\011\uffa2\013\uffa2\014" +
    "\uffa2\015\uffa2\017\uffa2\021\uffa2\055\uffa2\056\uffa2\001\002" +
    "\000\004\046\321\001\002\000\004\046\uffac\001\002\000" +
    "\004\046\uffab\001\002\000\024\003\316\012\152\021\114" +
    "\022\035\023\036\024\034\025\032\027\145\051\144\001" +
    "\002\000\004\046\320\001\002\000\004\046\317\001\002" +
    "\000\026\005\uffa9\007\uffa9\011\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\017\uffa9\021\uffa9\055\uffa9\056\uffa9\001\002\000\026" +
    "\005\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\017" +
    "\uffaa\021\uffaa\055\uffaa\056\uffaa\001\002\000\026\005\uffa7" +
    "\007\uffa7\011\uffa7\013\uffa7\014\uffa7\015\uffa7\017\uffa7\021" +
    "\uffa7\055\uffa7\056\uffa7\001\002\000\006\046\330\047\327" +
    "\001\002\000\006\046\uffe7\047\uffe7\001\002\000\010\046" +
    "\uffe6\047\uffe6\053\325\001\002\000\004\054\326\001\002" +
    "\000\006\046\uffe5\047\uffe5\001\002\000\004\021\324\001" +
    "\002\000\010\003\uffc1\021\uffc1\055\uffc1\001\002\000\006" +
    "\046\uffe8\047\uffe8\001\002\000\006\003\073\021\011\001" +
    "\002\000\006\047\uffcc\052\uffcc\001\002\000\010\047\uffc9" +
    "\052\uffc9\053\335\001\002\000\004\054\336\001\002\000" +
    "\006\047\uffc8\052\uffc8\001\002\000\004\056\uffd8\001\002" +
    "\000\010\016\uffd4\021\uffd4\056\uffd4\001\002\000\006\055" +
    "\uffda\056\uffda\001\002\000\006\046\343\047\327\001\002" +
    "\000\012\003\uffd9\021\uffd9\055\uffd9\056\uffd9\001\002\000" +
    "\006\055\uffdd\056\uffdd\001\002\000\010\016\066\021\065" +
    "\056\uffd5\001\002\000\004\056\347\001\002\000\004\002" +
    "\001\001\002\000\012\006\ufffc\010\ufffc\021\ufffc\055\ufffc" +
    "\001\002\000\006\003\352\021\324\001\002\000\006\046" +
    "\uffe9\047\uffe9\001\002\000\006\046\uffea\047\uffea\001\002" +
    "\000\006\046\356\047\355\001\002\000\004\021\324\001" +
    "\002\000\012\006\uffec\010\uffec\021\uffec\055\uffec\001\002" +
    "\000\006\046\uffeb\047\uffeb\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\020\004\016\005\015\006\014" +
    "\007\012\012\007\013\011\040\013\001\001\000\002\001" +
    "\001\000\004\076\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\347\007\012\012\007\013\011\040\013" +
    "\001\001\000\002\001\001\000\004\043\041\001\001\000" +
    "\004\012\021\001\001\000\006\010\026\011\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\072\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\052\020\054\021\051\022\050\001\001\000\010" +
    "\012\052\021\343\022\050\001\001\000\002\001\001\000" +
    "\006\023\341\024\322\001\001\000\002\001\001\000\004" +
    "\042\056\001\001\000\012\025\061\026\060\027\063\030" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\337\030\062\001\001\000\002\001\001\000\004\037" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\071\031\075\032\074\033\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\077\015\102\016\100\017\104" +
    "\001\001\000\006\023\321\024\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\077\016\105\017\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\044\127" +
    "\045\130\046\133\047\121\050\114\051\132\052\111\054" +
    "\125\071\123\073\131\075\122\001\001\000\004\074\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\052\136\054\125\057\277" +
    "\060\152\061\150\062\137\071\145\072\153\073\131\001" +
    "\001\000\002\001\001\000\030\044\127\045\264\046\133" +
    "\047\121\050\114\051\132\052\111\054\125\071\123\073" +
    "\131\075\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\053\223\055" +
    "\222\056\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\044\134\047\121\050\114\051\132\052\111\054\125" +
    "\071\123\073\131\075\122\001\001\000\002\001\001\000" +
    "\032\034\146\035\141\036\140\052\136\054\125\057\142" +
    "\060\152\061\150\062\137\071\145\072\153\073\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\052\136\054" +
    "\125\057\176\060\152\061\150\062\137\071\145\072\153" +
    "\073\131\001\001\000\022\052\136\054\125\060\152\061" +
    "\175\062\137\071\145\072\153\073\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\171\001\001\000\002\001\001\000\004\067\157\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\052\136\054\125\062\160\071\145" +
    "\072\153\073\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\052\136\054\125\057\163\060\152\061\150" +
    "\062\137\071\145\072\153\073\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\136\054" +
    "\125\060\172\062\137\071\145\072\153\073\131\001\001" +
    "\000\004\067\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\036\201\052\136\054\125\057\142\060" +
    "\152\061\150\062\137\071\145\072\153\073\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\052\136\054" +
    "\125\057\204\060\152\061\150\062\137\071\145\072\153" +
    "\073\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\234\001\001\000\024\052\136" +
    "\054\125\057\230\060\152\061\150\062\137\071\145\072" +
    "\153\073\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\052\136\054\125\057\241\060\152\061" +
    "\150\062\137\063\244\064\243\065\240\071\145\072\153" +
    "\073\131\001\001\000\002\001\001\000\004\070\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\047\247\050\246\051\132\052\111\054\125\071" +
    "\123\073\131\075\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\052\136\054\125\057\241\060\152\061" +
    "\150\062\137\064\253\065\240\071\145\072\153\073\131" +
    "\001\001\000\026\052\136\054\125\057\241\060\152\061" +
    "\150\062\137\065\252\071\145\072\153\073\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\052\136\054\125\057" +
    "\263\060\152\061\150\062\137\071\145\072\153\073\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\052\136\054\125\057\241\060\152\061\150" +
    "\062\137\063\267\064\243\065\240\071\145\072\153\073" +
    "\131\001\001\000\002\001\001\000\024\044\272\047\121" +
    "\050\271\051\132\052\111\054\125\071\123\073\131\075" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\047\275\050\274\051\132\052\111\054\125\071\123\073" +
    "\131\075\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\052\303\054\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\052\136\054\125\057\314\060" +
    "\152\061\150\062\137\071\145\072\153\073\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\071\033\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\345\026\060\027\063\030\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\353" +
    "\024\352\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\356\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null)
	{
		if (s.value != null)
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " " + s.value.toString());
		}
		else
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " NULLL!!!");
		}
	}

	return s;

    }


	Logger log = Logger.getLogger(getClass());

	public void syntax_error(Symbol cur_token)
	{
		int line = ((Symbol)cur_token).left;
		log.error("Syntax error (line " + line + ") Unexpected symbol " + (((Symbol)cur_token).value));
		//report_error("\nSintaksna greska ", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Unrecovered syntax error", cur_token);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error("Fatal error" + message, info);
	}

	public void report_error(String message, Object info)
	{
		//dump_stack();
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
		{
			msg.append("(line ").append(((Symbol)info).left).append(")");
			msg.append(" Unexpected symbol " + (((Symbol)info).value));
		}
		log.error(msg.toString());
	}
	
	public void reportSemanticError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Semantic error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}

	public void reportRecoveredSyntaxError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Recovery syntax error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	// Declarations
	Obj currentDeclTypeObj = MyTab.noObj;
	int declKind = Obj.NO_VALUE;	

	// Classes
	Obj currentClassObj = MyTab.noObj;
	boolean classContext = false;
	Obj superClassObj = MyTab.noObj;

	// Methods
	Obj currentMethodObj = MyTab.noObj;
	Struct retType = MyTab.noType;
	boolean isVoid = false;
	boolean returnFound = false;
	int formalParamsCnt = 0;

	// Statements
	Stack<DesignatorInfo> designatorChainsStack = new Stack<DesignatorInfo>();
	public DesignatorInfo designatorTop()
	{
		return designatorChainsStack.peek();
	}
	
	Obj currentMethodCallObj = MyTab.noObj;
	int currentActualParam = 0;
	boolean isThisCall = false;

	boolean inWhile = false;

	boolean mainFound = false;

	class Info
	{
		public Object value;
		public Struct type;
		
		public Info(Object value, Struct type)
		{
			this.value = value;
			this.type = type;
		}
	}
	
	class DesignatorInfo
	{
		public Obj obj;
		public boolean isElementOfArray = false;
		public boolean isClassMember = false;

		public DesignatorInfo(Obj obj, boolean isElem)
		{
			this.obj = obj;
			this.isElementOfArray = isElem;
		}

		public DesignatorInfo(Obj obj)
		{
			this.obj = obj;
		}

		public Struct getType()
		{
			if (obj.getType().getKind() == Struct.Array && isElementOfArray)
				return obj.getType().getElemType();
			return obj.getType();
		}
	}	

	public Obj copyObj(Obj obj)
	{
		Obj newobj = new Obj(obj.getKind(), obj.getName(), obj.getType(), obj.getAdr(), obj.getLevel());
		SymbolDataStructure newSymbols = new HashTableDataStructure();
		for (Obj o : obj.getLocalSymbols())
			newSymbols.insertKey(o);
		newobj.setLocals(newSymbols);
		
		return newobj;
	}

	public Obj insertSymbol(int kind, String name, Struct type, int line)
	{
		Obj obj = MyTab.currentScope.findSymbol(name);
		boolean inherited = (obj instanceof MyObj) && ((MyObj)obj).isInherited;
		
		if (obj != null && obj != MyTab.noObj && !inherited)
		{
			parser.reportSemanticError("Symbol " + name + " already defined in the current scope", line);
			return MyTab.noObj;
		}
		else
			return MyTab.insert(kind, name, type, classContext);
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeObjNode = MyTab.find(typeName);
	if (typeObjNode == null || typeObjNode == MyTab.noObj)
	{
		parser.reportSemanticError("Type " + typeName + " undefined", typeNameleft);
		RESULT = MyTab.noObj;
	}
	else
	{
		if (typeObjNode.getKind() == Obj.Type)
			RESULT = typeObjNode;
		else
		{
			parser.reportSemanticError(typeName + " is not a type", typeNameleft);
			RESULT = MyTab.noObj;
		}
	}
	currentDeclTypeObj = RESULT;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Relop ::= LESSE 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Relop ::= LESS 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Relop ::= GRTE 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Relop ::= GRT 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relop ::= NEQ 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relop ::= EQ 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Mulop ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Mulop ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Mulop ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Addop ::= SUB 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Addop ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Factor ::= LPAREN Expr RPAREN 
            {
              Info RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	RESULT = exprInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Factor ::= NEW IDENT LBRACKET error RBRACKET 
            {
              Info RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong allocation expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Factor ::= NEW IDENT LBRACKET Expr RBRACKET 
            {
              Info RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else if (!exprInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Expression must be of int type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, new MyStruct(Struct.Array, typeObj.getType()));

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Factor ::= NEW IDENT 
            {
              Info RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type || typeObj.getType().getKind() != Struct.Class)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a class name", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, typeObj.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Factor ::= Value 
            {
              Info RESULT =null;
		int valueInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info valueInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = valueInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Factor ::= FuncCall 
            {
              Info RESULT =null;
		int funcCallInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info funcCallInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = funcCallInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Factor ::= Designator 
            {
              Info RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = new Info(0, desigInfo.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Term ::= Factor 
            {
              Info RESULT =null;
		int factorInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info factorInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = factorInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Term ::= Term Mulop Factor 
            {
              Info RESULT =null;
		int termInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info termInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opStringleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opStringright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String opString = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info factorInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!(factorInfo.type.equals(MyTab.intType) && termInfo.type.equals(MyTab.intType)))
	{
		parser.reportSemanticError("Operator " + opString + " allowed only on int type", termInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, MyTab.intType);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TermList ::= Term 
            {
              Info RESULT =null;
		int termInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = termInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TermList ::= TermList Addop Term 
            {
              Info RESULT =null;
		int leftInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info leftInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opStringleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opStringright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String opString = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info rightInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (leftInfo.type.equals(MyTab.intType) && rightInfo.type.equals(MyTab.intType) ||
		leftInfo.type.equals(MyTab.stringType) && rightInfo.type.equals(MyTab.stringType) && opString.equals("+"))
		RESULT = new Info(0, leftInfo.type);
	else
	{
		RESULT = new Info(0, MyTab.noType);
		if (opString.equals("+"))
			parser.reportSemanticError("Operator " + opString + " allowed only on string and int operands", leftInfoleft);
		else
			parser.reportSemanticError("Operator " + opString + " allowed only on int operands", leftInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr ::= TermList 
            {
              Info RESULT =null;
		int termListInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termListInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = termListInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr ::= SUB TermList 
            {
              Info RESULT =null;
		int termListInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termListInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!termListInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Unary negation operator allowed only on int type", termListInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, termListInfo.type);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorPart ::= LBRACKET error RBRACKET 
            {
              DesignatorInfo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong index expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DesignatorPart ::= LBRACKET Expr RBRACKET 
            {
              DesignatorInfo RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (designatorTop().obj.getType().getKind() != Struct.Array)
		parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not an array", exprInfoleft);
	else
	{
		if (!exprInfo.type.equals(MyTab.intType))
			parser.reportSemanticError("Index expression is not of int type", exprInfoleft);
		designatorTop().isElementOfArray = true;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DesignatorPart ::= DOT IDENT 
            {
              DesignatorInfo RESULT =null;
		int desigNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String desigName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (designatorTop().obj != MyTab.noObj)
	{
		if (designatorTop().obj.getType().getKind() != Struct.Class)
			parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not of class type", desigNameleft);
		else
		{
			Obj desigObj = MyTab.noObj;
			boolean found = false;
			for (Obj o : designatorTop().obj.getType().getMembers())
			{
				if (o.getName().equals(desigName))
				{
					desigObj = o;
					found = true;
					break;
				}
			}
			
			if (!found)
			{
				String className = MyTab.getTypeName(designatorTop().obj.getType());
				parser.reportSemanticError("Identifier " + desigName + " is not a member of the class " + className, desigNameleft);
			}
			else
			{
				designatorTop().obj = desigObj;
				designatorTop().isClassMember = true;
			}
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DesignatorList ::= DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DesignatorList ::= DesignatorList DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DesignatorListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DesignatorListOpt ::= DesignatorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DesignatorName ::= IDENT 
            {
              Object RESULT =null;
		int desigNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String desigName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj designatorObj = MyTab.find(desigName);
	if (designatorObj == null || designatorObj == MyTab.noObj)
	{
		parser.reportSemanticError("Identifier " + desigName + " undefined", desigNameleft);
		designatorChainsStack.push(new DesignatorInfo(MyTab.noObj));
	}
	else
	{
		designatorChainsStack.push(new DesignatorInfo(designatorObj));
		if (designatorTop().obj instanceof MyObj && ((MyObj)designatorTop().obj).isClassMember)
				designatorTop().isClassMember = true;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorName",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Designator ::= DesignatorName DesignatorListOpt 
            {
              DesignatorInfo RESULT =null;
		
	RESULT = designatorChainsStack.pop();
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ActualParam ::= Expr 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (currentMethodCallObj != MyTab.noObj)
	{
		int forParsCnt = (isThisCall) ? currentMethodCallObj.getAdr() - 1 : currentMethodCallObj.getAdr();
		if (currentActualParam + 1 > forParsCnt)
		{
			parser.reportSemanticError("To many arguments", exprInfoleft);
		}
		else
		{
			Obj paramObj = null;
			Iterator<Obj> it = currentMethodCallObj.getLocalSymbols().iterator();
			if (isThisCall)
				it.next();
			for (int i = 0; i <= currentActualParam; ++i)
				paramObj = it.next();
			if (exprInfo.type != MyTab.noType && !paramObj.getType().compatibleWith(exprInfo.type))
			{
				if (!(exprInfo.type.getKind() == Struct.Array && paramObj.getType().getKind() == Struct.Array && paramObj.getType().getElemType() == MyTab.noType))
				parser.reportSemanticError("Actual parameter on position " + currentActualParam + ". type (" + MyTab.getTypeName(exprInfo.type)
										 + ") doesn't match with formal parameter type (" + MyTab.getTypeName(paramObj.getType()) + ")", exprInfoleft);
			}
		}
		currentActualParam++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParam",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ActualParamsList ::= ActualParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ActualParamsList ::= ActualParamsList COMMA ActualParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ActualParamsOpt ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong actual parameters in function call", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ActualParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ActualParamsOpt ::= ActualParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CallName ::= Designator 
            {
              DesignatorInfo RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	currentActualParam = 0;
	isThisCall = false;
	if (desigInfo.obj != MyTab.noObj && desigInfo.obj.getKind() != Obj.Meth)
	{
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a global function or a method", desigInfoleft);
		//RESULT = new Info(0, MyTab.noType);
		currentMethodCallObj = MyTab.noObj;
	}
	else
	{
		currentMethodCallObj = desigInfo.obj;
		Struct methType = desigInfo.obj.getType();
		if (desigInfo.isClassMember)
			isThisCall = true;
		//RESULT = new Info(0, methType);
	}
	RESULT = desigInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CallName",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // FuncCall ::= CallName LPAREN error SEMI 
            {
              Info RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong function call", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncCall",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FuncCall ::= CallName LPAREN ActualParamsOpt RPAREN 
            {
              Info RESULT =null;
		int callInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int callInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo callInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	RESULT = new Info(0, currentMethodCallObj.getType());
	
	int forParsCnt = (isThisCall) ? currentMethodCallObj.getAdr() - 1 : currentMethodCallObj.getAdr();

	if (currentActualParam < forParsCnt)
		parser.reportSemanticError("Insufficient number of arguments", lleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncCall",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SimpleStatement ::= LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SimpleStatement ::= PRINT LPAREN error COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.reportRecoveredSyntaxError("Print function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SimpleStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SimpleStatement ::= PRINT LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.reportRecoveredSyntaxError("Print function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SimpleStatement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SimpleStatement ::= READ LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.reportRecoveredSyntaxError("Read function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // SimpleStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
	{
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	}

	if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getType().equals(MyTab.intType) || desigInfo.obj.getType().equals(MyTab.charType) || desigInfo.obj.getType().equals(MyTab.boolType) || desigInfo.obj.getType().equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a of int, char, bool or string type", desigInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SimpleStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	returnFound = true;
	
	if (!isVoid && (retType == null || !retType.equals(exprInfo.type)))
	{
		parser.reportSemanticError("Expresion type doesn't match method return type", exprInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SimpleStatement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (!isVoid)
		parser.reportSemanticError("Method must return a value", rleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SimpleStatement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (inWhile == false)
		parser.reportSemanticError("Break statement allowed only in while loop", brleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SimpleStatement ::= Designator IncDec SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (!(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	if (!desigInfo.getType().equals(MyTab.intType))
		parser.reportSemanticError("Unary inc/dec allowed only on integers", desigInfoleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SimpleStatement ::= FuncCall SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SimpleStatement ::= Designator ASSIGN error SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong assignment expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SimpleStatement ::= Designator ASSIGN Expr SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (desigInfo.obj.getKind() != Obj.Var && desigInfo.obj.getKind() != Obj.Fld)
    {
    	parser.reportSemanticError("Incorrect assignement, destination must be a variable, an element of array or a field", exInfoleft);
    }
	else
	{
		Struct destType, srcType;
		destType = desigInfo.getType();
		srcType = exInfo.type;	
						
		if (!srcType.compatibleWith(destType))
		{
			if (!(srcType instanceof MyStruct && ((MyStruct)srcType).superClass.getType().compatibleWith(destType)))
				parser.reportSemanticError("Destination and source type must be compatibile",exInfoleft);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IncDec ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IncDec ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CondFact ::= Expr 
            {
              Info RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!exprInfo.type.equals(MyTab.boolType))
		parser.reportSemanticError("Expression must be of boolean type", exprInfoleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CondFact ::= Expr Relop Expr 
            {
              Info RESULT =null;
		int leftInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info leftInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info rightInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!leftInfo.type.compatibleWith(rightInfo.type))
		parser.reportSemanticError("Expressions not compatible", rightInfoleft);
	else if ((leftInfo.type.getKind() == Struct.Class || leftInfo.type.getKind() == Struct.Array) && (!op.equals("!=") && !op.equals("==")))
		parser.reportSemanticError("Only != and == operators allowed on class and array types", leftInfoleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CondTerm ::= CondFact 
            {
              Info RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CondTerm ::= CondTerm LAND CondFact 
            {
              Info RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Condition ::= error 
            {
              Info RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong condition expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Condition ::= CondTerm 
            {
              Info RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Condition ::= CondTerm LOR CondTerm 
            {
              Info RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LoopKeyword ::= WHILE 
            {
              Object RESULT =null;
		
	inWhile = true;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LoopKeyword",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ClosedStatement ::= LoopKeyword LPAREN Condition RPAREN ClosedStatement 
            {
              Object RESULT =null;
		 inWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ClosedStatement ::= IF LPAREN Condition RPAREN ClosedStatement ELSE ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ClosedStatement ::= SimpleStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpenStatement ::= LoopKeyword LPAREN Condition RPAREN OpenStatement 
            {
              Object RESULT =null;
		 inWhile = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OpenStatement ::= IF LPAREN Condition RPAREN ClosedStatement ELSE OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpenStatement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Statement ::= ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Statement ::= OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementListOpt ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LocalVarDeclLine ::= Type VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclLine",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LocalVarDeclList ::= IDENT error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LocalVarDeclList ::= LocalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LocalVarDeclList ::= LocalVarDeclLine LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LocalVarDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LocalVarDeclOpt ::= LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormalParam ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int typeObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj typeObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, new MyStruct(Struct.Array, typeObj.getType()), paramNameleft);
		formalParamsCnt++;
	}	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormalParam ::= Type IDENT 
            {
              Object RESULT =null;
		int typeObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj typeObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, typeObj.getType(), paramNameleft);
		formalParamsCnt++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormalParam ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of formal parameters", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormalParamsList ::= FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormalParamsList ::= FormalParamsList COMMA FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormalParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParamsOpt ::= FormalParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = insertSymbol(Obj.Meth, methodName, retType, methodNameleft);
	currentMethodObj = RESULT;
	
	if (RESULT != MyTab.noObj)
	{
		if (methodName.equals("main"))
		{
			mainFound = true;
			if (!isVoid)
				parser.reportSemanticError("Method \"main\" must return void", methodNameleft);
		}
		MyTab.openScope(RESULT);
		parser.log.debug("**** Method \"" + methodName + "\" scope opened");
		declKind = Obj.Var;
		if (classContext)
			insertSymbol(Obj.Var, "this", currentClassObj.getType(), methodNameleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // RetType ::= IDENT 
            {
              Object RESULT =null;
		int retTypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String retTypeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj retObj = MyTab.find(retTypeName);
	isVoid = false;
	
	if (retObj == null || retObj == MyTab.noObj)
		parser.reportSemanticError("Return type " + retTypeName + "undefined", retTypeNameleft);
	else
		if (retObj.getKind() != Obj.Type)
			parser.reportSemanticError("Return identifier " + retTypeName + " is not a type", retTypeNameleft);
		else
			retType = retObj.getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // RetType ::= VOID 
            {
              Object RESULT =null;
		 isVoid = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDecl ::= RetType MethodName LPAREN FormalParamsOpt RPAREN LocalVarDeclOpt LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;
		int methObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).left;
		int methObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).right;
		Obj methObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		
	if (currentMethodObj != MyTab.noObj)
	{
		if (!isVoid && !returnFound)
			parser.reportSemanticError("No return statement in method " + methObj.getName(), methObjleft);
		else if (isVoid && returnFound)
			parser.reportSemanticError("Return statement in void method " + methObj.getName(), methObjleft);
			
			int forParsCnt = (classContext) ? formalParamsCnt + 1 : formalParamsCnt;
			currentMethodObj.setAdr(forParsCnt);
			MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
			MyTab.closeScope();
			parser.log.debug("**** Method \"" + methObj.getName() + "\" scope closed");
	}
	formalParamsCnt = 0;
	declKind = Obj.NO_VALUE;
	currentMethodObj = MyTab.noObj;
	retType = MyTab.noType;
	returnFound = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclOpt ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ClassMethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ClassMethodDeclOpt ::= LBRACE MethodDeclOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FieldDeclLine ::= Type VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclLine",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FieldsDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FieldsDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldsDeclList ::= FieldDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldsDeclList ::= FieldDeclLine FieldsDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FieldsDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldsDeclOpt ::= FieldsDeclList 
            {
              Object RESULT =null;
		
	if (currentClassObj != MyTab.noObj)
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ExtendsOpt ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Error in extension", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExtendsOpt ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int superClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int superClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String superClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj obj = MyTab.find(superClassName);
	if (obj == null || (obj.getKind() != Obj.Type && obj.getType().getKind() != Struct.Class))
		parser.reportSemanticError("Super class " + superClassName + " undefined", superClassNameleft);
	else
	{
		superClassObj = obj;
		((MyStruct)currentClassObj.getType()).superClass = superClassObj;
		for (Obj o : superClassObj.getType().getMembers())
		{
			Obj newObj = insertSymbol(o.getKind(), o.getName(), o.getType(), superClassNameleft);
			newObj.setAdr(o.getAdr());
			newObj.setFpPos(o.getFpPos());

			SymbolDataStructure newSymbols = new HashTableDataStructure();
			for (Obj loc : o.getLocalSymbols())
				newSymbols.insertKey(loc);
			newObj.setLocals(newSymbols);
			((MyObj)newObj).isInherited = true;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	MyStruct struct = new MyStruct(Struct.Class);
	RESULT = insertSymbol(Obj.Type, className, struct, classNameleft);
	if (RESULT != MyTab.noObj)
	{
		MyTab.openScope(RESULT);
		MyTab.getCurrentScope().isClassScope = true;
		parser.log.debug("Otvoren opseg klase \"" + className +"\"");
		declKind = Obj.Fld;
		struct.myObj = RESULT;
	}
	currentClassObj = RESULT;
	classContext = true;	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ClassDecl ::= CLASS ClassName ExtendsOpt LBRACE FieldsDeclOpt ClassMethodDeclOpt RBRACE 
            {
              Object RESULT =null;
		int classObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj classObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	if (currentClassObj != MyTab.noObj)
	{
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());
		MyTab.closeScope();
		parser.log.debug("Zatvoren opseg klase \"" + classObj.getName() +"\"");
	}
	currentClassObj = MyTab.noObj;
	superClassObj = MyTab.noObj;
	declKind = Obj.NO_VALUE;
	classContext = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VarDecl ::= IDENT LBRACKET RBRACKET 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, new MyStruct(Struct.Array, currentDeclTypeObj.getType()), varNameleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VarDecl ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, currentDeclTypeObj.getType(), varNameleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDeclSequence ::= VarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // GlobalVarDeclSequence ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // GlobalVarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // GlobalVarDeclSequence ::= GlobalVarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarDeclLine ::= Type NT$0 GlobalVarDeclSequence SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 currentDeclTypeObj = MyTab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclLine",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
 declKind = Obj.Var; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Value ::= STRING_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.stringType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Value ::= BOOL_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.boolType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Value ::= CHAR_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.charType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Value ::= NUMBER 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.intType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= IDENT ASSIGN Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int infoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info info = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!info.type.assignableTo(currentDeclTypeObj.getType()))
		parser.reportSemanticError("Type " + MyTab.getTypeObj(info.type).getName() + " not assignable to type " + currentDeclTypeObj.getName(), infoleft);
	else
		RESULT = insertSymbol(Obj.Con, constName, currentDeclTypeObj.getType(), infoleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclSequence ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclSequence ::= ConstDeclSequence COMMA ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclLine ::= CONST error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclLine",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclLine ::= CONST Type ConstDeclSequence SEMI 
            {
              Object RESULT =null;
		 currentDeclTypeObj = MyTab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclLine",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ConstDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= GlobalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclarationsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalDeclarationsOpt ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = insertSymbol(Obj.Prog, pName, MyTab.noType, pNameleft);
	if (RESULT == MyTab.noObj)
		parser.reportSemanticError("Invalid program name", pNameleft);
	MyTab.openScope(RESULT);
	parser.log.debug("****Program scope opened****");

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName GlobalDeclarationsOpt LBRACE MethodDeclOpt RBRACE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
	MyTab.closeScope();
	if (!mainFound)
		parser.reportSemanticError("Method \"main\" not found", lleft);
	parser.log.debug("****Program scope closed****");
	MyTab.dump(new MySymbolTableVisitor());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

