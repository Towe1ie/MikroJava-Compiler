
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 28 11:43:37 CEST 2015
//----------------------------------------------------

package rs.ac.bg.etf.ln110181d;

import java_cup.runtime.*;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.ln110181d.util.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;
import java.util.*;
import rs.etf.pp1.symboltable.structure.*;
import rs.etf.pp1.mj.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 28 11:43:37 CEST 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\235\000\002\002\011\000\002\002\004\000\002\106" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\002" +
    "\000\002\005\004\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\007\006\000\002" +
    "\007\005\000\002\010\005\000\002\010\003\000\002\011" +
    "\003\000\002\011\005\000\002\107\002\000\002\013\006" +
    "\000\002\014\005\000\002\014\003\000\002\014\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\003\000\002" +
    "\024\005\000\002\041\011\000\002\044\003\000\002\042" +
    "\004\000\002\042\003\000\002\042\002\000\002\020\003" +
    "\000\002\020\002\000\002\021\004\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\022\005\000\002" +
    "\043\005\000\002\043\002\000\002\025\003\000\002\025" +
    "\002\000\002\026\004\000\002\026\003\000\002\027\014" +
    "\000\002\031\002\000\002\030\003\000\002\030\003\000" +
    "\002\040\003\000\002\032\003\000\002\032\002\000\002" +
    "\033\005\000\002\033\003\000\002\034\003\000\002\034" +
    "\004\000\002\034\006\000\002\015\003\000\002\015\002" +
    "\000\002\016\004\000\002\016\003\000\002\016\005\000" +
    "\002\016\003\000\002\017\005\000\002\046\003\000\002" +
    "\046\002\000\002\047\004\000\002\047\003\000\002\045" +
    "\003\000\002\045\003\000\002\050\012\000\002\050\016" +
    "\000\002\050\012\000\002\051\003\000\002\051\016\000" +
    "\002\051\012\000\002\105\003\000\002\104\002\000\002" +
    "\073\002\000\002\074\002\000\002\053\002\000\002\054" +
    "\002\000\002\110\002\000\002\067\006\000\002\072\003" +
    "\000\002\067\003\000\002\067\003\000\002\111\002\000" +
    "\002\070\006\000\002\070\003\000\002\071\005\000\002" +
    "\071\003\000\002\052\006\000\002\052\006\000\002\052" +
    "\004\000\002\112\002\000\002\052\006\000\002\103\003" +
    "\000\002\103\003\000\002\052\004\000\002\052\004\000" +
    "\002\052\005\000\002\052\007\000\002\052\007\000\002" +
    "\052\007\000\002\052\007\000\002\052\011\000\002\052" +
    "\011\000\002\052\005\000\002\100\006\000\002\100\006" +
    "\000\002\102\003\000\002\035\003\000\002\035\002\000" +
    "\002\035\003\000\002\036\005\000\002\036\003\000\002" +
    "\037\003\000\002\055\004\000\002\057\003\000\002\060" +
    "\003\000\002\060\002\000\002\061\004\000\002\061\003" +
    "\000\002\056\004\000\002\056\006\000\002\062\002\000" +
    "\002\056\005\000\002\113\002\000\002\063\005\000\002" +
    "\063\003\000\002\065\005\000\002\065\003\000\002\064" +
    "\005\000\002\064\003\000\002\066\003\000\002\066\003" +
    "\000\002\066\003\000\002\066\004\000\002\066\007\000" +
    "\002\066\007\000\002\066\005\000\002\075\003\000\002" +
    "\075\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\077\003\000\002\077\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\004\005\001\002\000\004\002\u0103\001" +
    "\002\000\004\021\007\001\002\000\012\006\020\010\021" +
    "\021\011\055\ufffc\001\002\000\012\006\ufffe\010\ufffe\021" +
    "\ufffe\055\ufffe\001\002\000\006\003\ufff0\021\ufff0\001\002" +
    "\000\006\003\uff65\021\uff65\001\002\000\012\006\ufff9\010" +
    "\ufff9\021\ufff9\055\ufff9\001\002\000\012\006\ufff8\010\ufff8" +
    "\021\ufff8\055\ufff8\001\002\000\012\006\ufff7\010\ufff7\021" +
    "\ufff7\055\ufff7\001\002\000\012\006\ufffa\010\ufffa\021\ufffa" +
    "\055\ufffa\001\002\000\012\006\020\010\021\021\011\055" +
    "\ufffd\001\002\000\004\055\366\001\002\000\004\021\043" +
    "\001\002\000\006\003\023\021\011\001\002\000\006\003" +
    "\026\021\030\001\002\000\004\046\024\001\002\000\012" +
    "\006\ufff5\010\ufff5\021\ufff5\055\ufff5\001\002\000\006\046" +
    "\ufff3\047\ufff3\001\002\000\006\046\ufff2\047\ufff2\001\002" +
    "\000\006\046\040\047\037\001\002\000\004\045\031\001" +
    "\002\000\012\022\035\023\036\024\034\025\032\001\002" +
    "\000\044\026\uff66\027\uff66\030\uff66\031\uff66\032\uff66\035" +
    "\uff66\036\uff66\037\uff66\040\uff66\041\uff66\042\uff66\043\uff66" +
    "\044\uff66\046\uff66\047\uff66\052\uff66\054\uff66\001\002\000" +
    "\006\046\ufff1\047\ufff1\001\002\000\044\026\uff67\027\uff67" +
    "\030\uff67\031\uff67\032\uff67\035\uff67\036\uff67\037\uff67\040" +
    "\uff67\041\uff67\042\uff67\043\uff67\044\uff67\046\uff67\047\uff67" +
    "\052\uff67\054\uff67\001\002\000\044\026\uff69\027\uff69\030" +
    "\uff69\031\uff69\032\uff69\035\uff69\036\uff69\037\uff69\040\uff69" +
    "\041\uff69\042\uff69\043\uff69\044\uff69\046\uff69\047\uff69\052" +
    "\uff69\054\uff69\001\002\000\044\026\uff68\027\uff68\030\uff68" +
    "\031\uff68\032\uff68\035\uff68\036\uff68\037\uff68\040\uff68\041" +
    "\uff68\042\uff68\043\uff68\044\uff68\046\uff68\047\uff68\052\uff68" +
    "\054\uff68\001\002\000\006\003\026\021\030\001\002\000" +
    "\012\006\ufff6\010\ufff6\021\ufff6\055\ufff6\001\002\000\006" +
    "\046\ufff4\047\ufff4\001\002\000\010\003\046\020\045\055" +
    "\uffe3\001\002\000\010\003\uffe6\020\uffe6\055\uffe6\001\002" +
    "\000\004\055\050\001\002\000\004\021\047\001\002\000" +
    "\004\055\uffe4\001\002\000\004\055\uffe5\001\002\000\012" +
    "\003\054\021\011\055\uffe1\056\uffe1\001\002\000\012\003" +
    "\054\021\011\055\uffdf\056\uffdf\001\002\000\006\055\uffe2" +
    "\056\uffe2\001\002\000\004\021\345\001\002\000\010\046" +
    "\362\055\uffde\056\uffde\001\002\000\006\055\056\056\uffda" +
    "\001\002\000\010\016\066\021\064\056\uffd8\001\002\000" +
    "\004\056\060\001\002\000\012\006\uffe7\010\uffe7\021\uffe7" +
    "\055\uffe7\001\002\000\012\002\uffd9\016\066\021\064\056" +
    "\uffd9\001\002\000\004\056\360\001\002\000\004\021\067" +
    "\001\002\000\004\021\uffd2\001\002\000\012\002\uffd6\016" +
    "\uffd6\021\uffd6\056\uffd6\001\002\000\004\021\uffd3\001\002" +
    "\000\004\051\uffd1\001\002\000\004\051\071\001\002\000" +
    "\010\003\074\021\011\052\uffcf\001\002\000\004\021\355" +
    "\001\002\000\006\047\uffcd\052\uffcd\001\002\000\006\047" +
    "\uffcc\052\uffcc\001\002\000\006\047\353\052\uffd0\001\002" +
    "\000\004\052\077\001\002\000\010\003\101\021\104\055" +
    "\uffc8\001\002\000\004\021\345\001\002\000\004\055\uffc4" +
    "\001\002\000\004\055\uffc9\001\002\000\004\055\111\001" +
    "\002\000\006\003\107\021\uff65\001\002\000\010\003\101" +
    "\021\104\055\uffc6\001\002\000\004\055\uffc7\001\002\000" +
    "\004\046\110\001\002\000\004\055\uffc5\001\002\000\024" +
    "\005\uffd4\011\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\021" +
    "\uffd4\055\uffd4\056\uffd4\001\002\000\024\005\133\011\uffb5" +
    "\013\130\014\113\015\131\017\uffb5\021\117\055\116\056" +
    "\uffc1\001\002\000\004\051\334\001\002\000\024\005\uffbd" +
    "\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd\055" +
    "\uffbd\056\uffbd\001\002\000\060\026\uff89\027\uff89\030\uff89" +
    "\031\uff89\032\uff89\033\uff89\034\uff89\035\uff89\036\uff89\037" +
    "\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\324\051\uff89\052\uff89\053\323\054" +
    "\uff89\001\002\000\024\005\133\011\uffb5\013\130\014\113" +
    "\015\131\017\uffb5\021\117\055\116\056\uffc1\001\002\000" +
    "\060\026\uff8b\027\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b" +
    "\034\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042" +
    "\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b" +
    "\051\uff8b\052\uff8b\053\uff8b\054\uff8b\001\002\000\024\005" +
    "\133\011\uffb5\013\130\014\113\015\131\017\uffb5\021\117" +
    "\055\116\056\uffc2\001\002\000\012\033\uffa3\034\uffa3\045" +
    "\304\051\uff93\001\002\000\006\011\231\017\230\001\002" +
    "\000\004\046\226\001\002\000\024\005\uffbf\011\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\055\uffbf\056\uffbf" +
    "\001\002\000\004\051\214\001\002\000\026\005\uffb9\007" +
    "\uffb9\011\uffb9\013\uffb9\014\uffb9\015\uffb9\017\uffb9\021\uffb9" +
    "\055\uffb9\056\uffb9\001\002\000\024\005\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\055\uffbe\056\uffbe" +
    "\001\002\000\004\051\175\001\002\000\024\012\146\021" +
    "\117\022\035\023\036\024\034\025\032\027\143\046\140" +
    "\051\142\001\002\000\004\056\135\001\002\000\004\046" +
    "\134\001\002\000\026\005\uff9f\007\uff9f\011\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\017\uff9f\021\uff9f\055\uff9f\056\uff9f\001" +
    "\002\000\012\002\uffd5\016\uffd5\021\uffd5\056\uffd5\001\002" +
    "\000\046\026\uff7b\027\uff7b\030\uff7b\031\uff7b\032\uff7b\035" +
    "\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043\uff7b" +
    "\044\uff7b\046\uff7b\047\uff7b\051\uff93\052\uff7b\054\uff7b\001" +
    "\002\000\044\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c" +
    "\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\042\uff7c\043" +
    "\uff7c\044\uff7c\046\uff7c\047\uff7c\052\uff7c\054\uff7c\001\002" +
    "\000\026\005\uff9e\007\uff9e\011\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\017\uff9e\021\uff9e\055\uff9e\056\uff9e\001\002\000\004" +
    "\046\174\001\002\000\022\012\146\021\117\022\035\023" +
    "\036\024\034\025\032\027\143\051\142\001\002\000\020" +
    "\012\uff82\021\uff82\022\uff82\023\uff82\024\uff82\025\uff82\051" +
    "\uff82\001\002\000\044\026\uff7a\027\uff7a\030\uff7a\031\uff7a" +
    "\032\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a\042" +
    "\uff7a\043\uff7a\044\uff7a\046\uff7a\047\uff7a\052\uff7a\054\uff7a" +
    "\001\002\000\036\026\165\027\164\035\uff80\036\uff80\037" +
    "\uff80\040\uff80\041\uff80\042\uff80\043\uff80\044\uff80\046\uff80" +
    "\047\uff80\052\uff80\054\uff80\001\002\000\004\021\156\001" +
    "\002\000\044\026\uff7e\027\uff7e\030\152\031\153\032\151" +
    "\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043" +
    "\uff7e\044\uff7e\046\uff7e\047\uff7e\052\uff7e\054\uff7e\001\002" +
    "\000\044\026\uff79\027\uff79\030\uff79\031\uff79\032\uff79\035" +
    "\uff79\036\uff79\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79" +
    "\044\uff79\046\uff79\047\uff79\052\uff79\054\uff79\001\002\000" +
    "\020\012\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70" +
    "\051\uff70\001\002\000\020\012\uff72\021\uff72\022\uff72\023" +
    "\uff72\024\uff72\025\uff72\051\uff72\001\002\000\020\012\uff71" +
    "\021\uff71\022\uff71\023\uff71\024\uff71\025\uff71\051\uff71\001" +
    "\002\000\020\012\146\021\117\022\035\023\036\024\034" +
    "\025\032\051\142\001\002\000\044\026\uff7d\027\uff7d\030" +
    "\uff7d\031\uff7d\032\uff7d\035\uff7d\036\uff7d\037\uff7d\040\uff7d" +
    "\041\uff7d\042\uff7d\043\uff7d\044\uff7d\046\uff7d\047\uff7d\052" +
    "\uff7d\054\uff7d\001\002\000\046\026\uff78\027\uff78\030\uff78" +
    "\031\uff78\032\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\044\uff78\046\uff78\047\uff78\052\uff78" +
    "\053\157\054\uff78\001\002\000\024\003\161\012\146\021" +
    "\117\022\035\023\036\024\034\025\032\027\143\051\142" +
    "\001\002\000\004\054\163\001\002\000\004\054\162\001" +
    "\002\000\044\026\uff76\027\uff76\030\uff76\031\uff76\032\uff76" +
    "\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042\uff76\043" +
    "\uff76\044\uff76\046\uff76\047\uff76\052\uff76\054\uff76\001\002" +
    "\000\044\026\uff77\027\uff77\030\uff77\031\uff77\032\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\046\uff77\047\uff77\052\uff77\054\uff77\001\002\000" +
    "\020\012\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\051\uff73\001\002\000\020\012\uff74\021\uff74\022\uff74\023" +
    "\uff74\024\uff74\025\uff74\051\uff74\001\002\000\020\012\146" +
    "\021\117\022\035\023\036\024\034\025\032\051\142\001" +
    "\002\000\044\026\uff7f\027\uff7f\030\152\031\153\032\151" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\044\uff7f\046\uff7f\047\uff7f\052\uff7f\054\uff7f\001\002" +
    "\000\020\012\146\021\117\022\035\023\036\024\034\025" +
    "\032\051\142\001\002\000\036\026\165\027\164\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\044" +
    "\uff81\046\uff81\047\uff81\052\uff81\054\uff81\001\002\000\004" +
    "\052\173\001\002\000\044\026\uff75\027\uff75\030\uff75\031" +
    "\uff75\032\uff75\035\uff75\036\uff75\037\uff75\040\uff75\041\uff75" +
    "\042\uff75\043\uff75\044\uff75\046\uff75\047\uff75\052\uff75\054" +
    "\uff75\001\002\000\026\005\uff9d\007\uff9d\011\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\017\uff9d\021\uff9d\055\uff9d\056\uff9d\001" +
    "\002\000\024\003\177\012\146\021\117\022\035\023\036" +
    "\024\034\025\032\027\143\051\142\001\002\000\006\047" +
    "\206\052\207\001\002\000\006\047\200\052\201\001\002" +
    "\000\004\022\203\001\002\000\004\046\202\001\002\000" +
    "\026\005\uff99\007\uff99\011\uff99\013\uff99\014\uff99\015\uff99" +
    "\017\uff99\021\uff99\055\uff99\056\uff99\001\002\000\004\052" +
    "\204\001\002\000\004\046\205\001\002\000\026\005\uff97" +
    "\007\uff97\011\uff97\013\uff97\014\uff97\015\uff97\017\uff97\021" +
    "\uff97\055\uff97\056\uff97\001\002\000\004\022\211\001\002" +
    "\000\004\046\210\001\002\000\026\005\uff9a\007\uff9a\011" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\017\uff9a\021\uff9a\055\uff9a" +
    "\056\uff9a\001\002\000\004\052\212\001\002\000\004\046" +
    "\213\001\002\000\026\005\uff98\007\uff98\011\uff98\013\uff98" +
    "\014\uff98\015\uff98\017\uff98\021\uff98\055\uff98\056\uff98\001" +
    "\002\000\026\003\221\012\146\021\117\022\035\023\036" +
    "\024\034\025\032\027\143\051\142\052\uff91\001\002\000" +
    "\006\047\uff8e\052\uff8e\001\002\000\006\047\224\052\uff92" +
    "\001\002\000\006\047\uff8d\052\uff8d\001\002\000\004\052" +
    "\223\001\002\000\006\046\222\052\uff90\001\002\000\044" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\035\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\046\uff94\047\uff94\052\uff94\054\uff94\001\002\000\044\026" +
    "\uff95\027\uff95\030\uff95\031\uff95\032\uff95\035\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\046" +
    "\uff95\047\uff95\052\uff95\054\uff95\001\002\000\022\012\146" +
    "\021\117\022\035\023\036\024\034\025\032\027\143\051" +
    "\142\001\002\000\006\047\uff8f\052\uff8f\001\002\000\026" +
    "\005\uffa4\007\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4\017" +
    "\uffa4\021\uffa4\055\uffa4\056\uffa4\001\002\000\004\051\273" +
    "\001\002\000\004\051\uffb6\001\002\000\004\051\232\001" +
    "\002\000\024\003\236\012\146\021\117\022\035\023\036" +
    "\024\034\025\032\027\143\051\142\001\002\000\004\052" +
    "\257\001\002\000\010\043\uffa9\044\uffa9\052\uffa9\001\002" +
    "\000\024\035\247\036\254\037\251\040\253\041\252\042" +
    "\250\043\uffa7\044\uffa7\052\uffa7\001\002\000\006\044\uffac" +
    "\052\uffac\001\002\000\010\043\244\044\uffad\052\uffad\001" +
    "\002\000\006\044\241\052\uffae\001\002\000\022\012\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\027\uffb0\051" +
    "\uffb0\001\002\000\022\012\146\021\117\022\035\023\036" +
    "\024\034\025\032\027\143\051\142\001\002\000\010\043" +
    "\244\044\uffaf\052\uffaf\001\002\000\022\012\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\027\uffab\051\uffab\001" +
    "\002\000\022\012\146\021\117\022\035\023\036\024\034" +
    "\025\032\027\143\051\142\001\002\000\010\043\uffaa\044" +
    "\uffaa\052\uffaa\001\002\000\022\012\uff6f\021\uff6f\022\uff6f" +
    "\023\uff6f\024\uff6f\025\uff6f\027\uff6f\051\uff6f\001\002\000" +
    "\022\012\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a" +
    "\027\uff6a\051\uff6a\001\002\000\022\012\uff6d\021\uff6d\022" +
    "\uff6d\023\uff6d\024\uff6d\025\uff6d\027\uff6d\051\uff6d\001\002" +
    "\000\022\012\uff6b\021\uff6b\022\uff6b\023\uff6b\024\uff6b\025" +
    "\uff6b\027\uff6b\051\uff6b\001\002\000\022\012\uff6c\021\uff6c" +
    "\022\uff6c\023\uff6c\024\uff6c\025\uff6c\027\uff6c\051\uff6c\001" +
    "\002\000\022\012\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e" +
    "\025\uff6e\027\uff6e\051\uff6e\001\002\000\022\012\146\021" +
    "\117\022\035\023\036\024\034\025\032\027\143\051\142" +
    "\001\002\000\010\043\uffa8\044\uffa8\052\uffa8\001\002\000" +
    "\022\005\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4" +
    "\021\uffb4\055\uffb4\001\002\000\022\005\133\011\uffb5\013" +
    "\130\014\113\015\131\017\uffb5\021\117\055\116\001\002" +
    "\000\026\005\uffbd\007\uffb2\011\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\021\uffbd\055\uffbd\056\uffbd\001\002\000\024" +
    "\005\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021" +
    "\uffb3\055\uffb3\056\uffb3\001\002\000\024\005\uffbc\011\uffbc" +
    "\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\055\uffbc\056" +
    "\uffbc\001\002\000\004\007\265\001\002\000\022\005\uffb3" +
    "\011\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3\021\uffb3\055" +
    "\uffb3\001\002\000\022\005\133\011\uffb5\013\130\014\113" +
    "\015\131\017\uffb5\021\117\055\116\001\002\000\026\005" +
    "\uffb1\007\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1" +
    "\021\uffb1\055\uffb1\056\uffb1\001\002\000\024\005\uffb1\011" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\021\uffb1\055\uffb1" +
    "\056\uffb1\001\002\000\024\005\uffbb\011\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\017\uffbb\021\uffbb\055\uffbb\056\uffbb\001\002" +
    "\000\026\005\uffb8\007\uffb8\011\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\017\uffb8\021\uffb8\055\uffb8\056\uffb8\001\002\000\024" +
    "\003\236\012\146\021\117\022\035\023\036\024\034\025" +
    "\032\027\143\051\142\001\002\000\004\052\275\001\002" +
    "\000\022\005\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\017" +
    "\uffb4\021\uffb4\055\uffb4\001\002\000\022\005\133\011\uffb5" +
    "\013\130\014\113\015\131\017\uffb5\021\117\055\116\001" +
    "\002\000\026\005\uffb3\007\uffb3\011\uffb3\013\uffb3\014\uffb3" +
    "\015\uffb3\017\uffb3\021\uffb3\055\uffb3\056\uffb3\001\002\000" +
    "\024\005\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\021\uffb3\055\uffb3\056\uffb3\001\002\000\024\005\uffba\011" +
    "\uffba\013\uffba\014\uffba\015\uffba\017\uffba\021\uffba\055\uffba" +
    "\056\uffba\001\002\000\026\005\uffb7\007\uffb7\011\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\017\uffb7\021\uffb7\055\uffb7\056\uffb7" +
    "\001\002\000\006\033\312\034\313\001\002\000\024\003" +
    "\306\012\146\021\117\022\035\023\036\024\034\025\032" +
    "\027\143\051\142\001\002\000\004\046\310\001\002\000" +
    "\004\046\307\001\002\000\026\005\uffa5\007\uffa5\011\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\017\uffa5\021\uffa5\055\uffa5\056" +
    "\uffa5\001\002\000\026\005\uffa6\007\uffa6\011\uffa6\013\uffa6" +
    "\014\uffa6\015\uffa6\017\uffa6\021\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\004\046\314\001\002\000\004\046\uffa1\001\002" +
    "\000\004\046\uffa0\001\002\000\026\005\uffa2\007\uffa2\011" +
    "\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2\021\uffa2\055\uffa2" +
    "\056\uffa2\001\002\000\024\005\uffc0\011\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\021\uffc0\055\uffc0\056\uffc0\001\002" +
    "\000\004\056\317\001\002\000\026\005\uff96\007\uff96\011" +
    "\uff96\013\uff96\014\uff96\015\uff96\017\uff96\021\uff96\055\uff96" +
    "\056\uff96\001\002\000\054\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\036\uff8c\037\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046" +
    "\uff8c\047\uff8c\051\uff8c\052\uff8c\054\uff8c\001\002\000\060" +
    "\026\uff87\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\052\uff87\053\uff87\054\uff87\001\002\000\060\026\uff8a" +
    "\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\324\051\uff8a\052" +
    "\uff8a\053\323\054\uff8a\001\002\000\024\003\326\012\uff84" +
    "\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\027\uff84\051" +
    "\uff84\001\002\000\004\021\325\001\002\000\060\026\uff86" +
    "\027\uff86\030\uff86\031\uff86\032\uff86\033\uff86\034\uff86\035" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052" +
    "\uff86\053\uff86\054\uff86\001\002\000\004\054\332\001\002" +
    "\000\022\012\146\021\117\022\035\023\036\024\034\025" +
    "\032\027\143\051\142\001\002\000\004\054\331\001\002" +
    "\000\060\026\uff85\027\uff85\030\uff85\031\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050" +
    "\uff85\051\uff85\052\uff85\053\uff85\054\uff85\001\002\000\060" +
    "\026\uff83\027\uff83\030\uff83\031\uff83\032\uff83\033\uff83\034" +
    "\uff83\035\uff83\036\uff83\037\uff83\040\uff83\041\uff83\042\uff83" +
    "\043\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051" +
    "\uff83\052\uff83\053\uff83\054\uff83\001\002\000\060\026\uff88" +
    "\027\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\035" +
    "\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\001\002\000\006\003\335\021\117" +
    "\001\002\000\004\052\341\001\002\000\004\052\337\001" +
    "\002\000\004\046\340\001\002\000\026\005\uff9c\007\uff9c" +
    "\011\uff9c\013\uff9c\014\uff9c\015\uff9c\017\uff9c\021\uff9c\055" +
    "\uff9c\056\uff9c\001\002\000\004\046\342\001\002\000\026" +
    "\005\uff9b\007\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b\017" +
    "\uff9b\021\uff9b\055\uff9b\056\uff9b\001\002\000\006\046\351" +
    "\047\350\001\002\000\006\046\uffea\047\uffea\001\002\000" +
    "\010\046\uffe9\047\uffe9\053\346\001\002\000\004\054\347" +
    "\001\002\000\006\046\uffe8\047\uffe8\001\002\000\004\021" +
    "\345\001\002\000\010\003\uffc3\021\uffc3\055\uffc3\001\002" +
    "\000\006\046\uffeb\047\uffeb\001\002\000\006\003\074\021" +
    "\011\001\002\000\006\047\uffce\052\uffce\001\002\000\010" +
    "\047\uffcb\052\uffcb\053\356\001\002\000\004\054\357\001" +
    "\002\000\006\047\uffca\052\uffca\001\002\000\004\056\uffdb" +
    "\001\002\000\012\002\uffd7\016\uffd7\021\uffd7\056\uffd7\001" +
    "\002\000\006\055\uffdd\056\uffdd\001\002\000\006\046\364" +
    "\047\350\001\002\000\012\003\uffdc\021\uffdc\055\uffdc\056" +
    "\uffdc\001\002\000\006\055\uffe0\056\uffe0\001\002\000\010" +
    "\016\066\021\064\056\uffd8\001\002\000\004\056\370\001" +
    "\002\000\010\002\uffd8\016\066\021\064\001\002\000\004" +
    "\002\001\001\002\000\004\002\uffff\001\002\000\012\006" +
    "\ufffb\010\ufffb\021\ufffb\055\ufffb\001\002\000\006\003\375" +
    "\021\345\001\002\000\006\046\uffec\047\uffec\001\002\000" +
    "\006\046\uffed\047\uffed\001\002\000\006\046\u0101\047\u0100" +
    "\001\002\000\004\021\345\001\002\000\012\006\uffef\010" +
    "\uffef\021\uffef\055\uffef\001\002\000\006\046\uffee\047\uffee" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\020\004\016\005\015\006\014" +
    "\007\012\012\007\013\011\041\013\001\001\000\002\001" +
    "\001\000\004\107\373\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\372\007\012\012\007\013\011\041\013" +
    "\001\001\000\002\001\001\000\004\044\041\001\001\000" +
    "\004\012\021\001\001\000\006\010\026\011\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\101\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\052\020\054\021\051\022\050\001\001\000\010" +
    "\012\052\021\364\022\050\001\001\000\002\001\001\000" +
    "\006\023\362\024\343\001\001\000\002\001\001\000\004" +
    "\043\056\001\001\000\012\025\061\026\060\027\064\030" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\360\030\062\001\001\000\002\001\001\000\004\040" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\071\032\075\033\074\034\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\077\015\102\016\101\017\104" +
    "\001\001\000\006\023\342\024\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\077\016\105\017\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\111" +
    "\001\001\000\030\045\123\046\131\047\117\050\126\051" +
    "\113\052\125\055\120\057\114\100\122\102\124\104\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\056" +
    "\320\060\317\061\321\001\001\000\030\045\123\046\315" +
    "\047\117\050\126\051\113\052\125\055\120\057\114\100" +
    "\122\102\124\104\121\001\001\000\002\001\001\000\024" +
    "\045\314\050\126\051\113\052\125\055\120\057\114\100" +
    "\122\102\124\104\121\001\001\000\004\112\302\001\001" +
    "\000\004\105\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\055\135\057\114\063\140\064" +
    "\146\065\144\066\136\100\143\101\147\102\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\055\135\057\114\063" +
    "\171\064\146\065\144\066\136\100\143\101\147\102\124" +
    "\001\001\000\004\113\167\001\001\000\002\001\001\000" +
    "\004\075\165\001\001\000\002\001\001\000\004\076\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\055\135\057\114\066\154" +
    "\100\143\101\147\102\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\055\135\057\114\063\157\064\146" +
    "\065\144\066\136\100\143\101\147\102\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\055" +
    "\135\057\114\064\166\066\136\100\143\101\147\102\124" +
    "\001\001\000\004\076\153\001\001\000\022\055\135\057" +
    "\114\064\146\065\170\066\136\100\143\101\147\102\124" +
    "\001\001\000\004\075\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\055\135\057\114" +
    "\063\175\064\146\065\144\066\136\100\143\101\147\102" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\035\217\036\215" +
    "\037\214\055\135\057\114\063\216\064\146\065\144\066" +
    "\136\100\143\101\147\102\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\037\224\055\135\057\114\063\216\064\146\065\144\066" +
    "\136\100\143\101\147\102\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\055\135\057\114\063\234\064\146" +
    "\065\144\066\136\067\237\070\236\071\233\072\232\100" +
    "\143\101\147\102\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\110\241\001\001" +
    "\000\030\055\135\057\114\063\234\064\146\065\144\066" +
    "\136\070\242\071\233\100\143\101\147\102\124\001\001" +
    "\000\002\001\001\000\004\111\244\001\001\000\026\055" +
    "\135\057\114\063\234\064\146\065\144\066\136\071\245" +
    "\100\143\101\147\102\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\055" +
    "\135\057\114\063\255\064\146\065\144\066\136\100\143" +
    "\101\147\102\124\001\001\000\002\001\001\000\004\073" +
    "\257\001\001\000\024\045\261\050\126\051\260\052\125" +
    "\055\120\057\114\100\122\102\124\104\121\001\001\000" +
    "\004\053\263\001\001\000\004\074\262\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\074\265\001\001\000" +
    "\022\050\267\051\266\052\125\055\120\057\114\100\122" +
    "\102\124\104\121\001\001\000\004\054\271\001\001\000" +
    "\004\054\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\055\135\057\114\063\234\064\146\065\144\066" +
    "\136\067\237\070\236\071\233\072\273\100\143\101\147" +
    "\102\124\001\001\000\002\001\001\000\004\073\275\001" +
    "\001\000\022\050\277\051\276\052\125\055\120\057\114" +
    "\100\122\102\124\104\121\001\001\000\004\074\301\001" +
    "\001\000\004\074\300\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\310\001\001\000\024\055\135\057" +
    "\114\063\304\064\146\065\144\066\136\100\143\101\147" +
    "\102\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\332\001\001\000\004\062" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\055\135\057\114\063\327\064\146\065" +
    "\144\066\136\100\143\101\147\102\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\335\057\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\351\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\071\034\353\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\366\026\060\027\064\030\062\001\001\000\002\001" +
    "\001\000\014\025\371\026\060\027\064\030\062\106\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\376\024\375\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\u0101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); // Universe scope
	MyCode.init();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null)
	{
		if (s.value != null)
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " " + s.value.toString());
		}
		else
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " NULLL!!!");
		}
	}

	return s;

    }


	Logger log = Logger.getLogger(getClass());
	boolean errorDetected = false;

	public void syntax_error(Symbol cur_token)
	{
		errorDetected = true;
		int line = ((Symbol)cur_token).left;
		log.error("Syntax error (line " + line + ") Unexpected symbol " + (((Symbol)cur_token).value));
		//report_error("\nSintaksna greska ", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Unrecovered syntax error", cur_token);
	}

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error("Fatal error" + message, info);
	}

	public void report_error(String message, Object info)
	{
		//dump_stack();
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
		{
			msg.append("(line ").append(((Symbol)info).left).append(")");
			msg.append(" Unexpected symbol " + (((Symbol)info).value));
		}
		log.error(msg.toString());
	}
	
	public void reportSemanticError(String message, int line)
	{
		errorDetected = true;
		StringBuilder sb = new StringBuilder();
		sb.append("Semantic error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}

	public void reportRecoveredSyntaxError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Recovery syntax error (line ").append(line + ") : ").append(message);
		log.error(sb.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	// Declarations
	Obj currentDeclTypeObj = MyTab.noObj;
	int declKind = Obj.NO_VALUE;	
	int stringCnt = 0;

	// Classes
	Obj currentClassObj = MyTab.noObj;
	boolean classContext = false;
	Obj superClassObj = MyTab.noObj;

	// Methods
	Obj currentMethodObj = MyTab.noObj;
	Struct retType = MyTab.noType;
	boolean isVoid = false;
	boolean returnFound = false;
	boolean voidReturnFound = false;
	int formalParamsCnt = 0;

	// Statements
	Stack<DesignatorInfo> designatorChainsStack = new Stack<DesignatorInfo>();
	public DesignatorInfo designatorTop()
	{
		return designatorChainsStack.peek();
	}
	boolean negation = false;
	
	Obj currentMethodCallObj = MyTab.noObj;
	int currentActualParam = 0;
	boolean isThisCall = false;

	//boolean inWhile = false;
	int whileCnt = 0;

	boolean mainFound = false;

	class Info
	{
		public Object value;
		public Struct type;

		public int getIntVal()
		{
			int val = 0;
			if (value instanceof Integer)
				val = (int)value;
			else if (value instanceof Character)
				val = (int)((Character)value).charValue();
			else if (value instanceof Boolean)
				val = (Boolean)value ? 1 : 0;
			
			return val;
		}
		
		public Info(Object value, Struct type)
		{
			this.value = value;
			this.type = type;
		}
	}
	
	class DesignatorInfo
	{
		public Obj obj;
		public boolean isElementOfArray = false;
		public boolean isClassMember = false;
		public boolean designatorStart = true;

		public DesignatorInfo(Obj obj, boolean isElem)
		{
			this.obj = obj;
			this.isElementOfArray = isElem;
		}

		public DesignatorInfo(Obj obj)
		{
			this.obj = obj;
		}

		public Struct getType()
		{
			if (obj.getType().getKind() == Struct.Array && isElementOfArray)
				return obj.getType().getElemType();
			return obj.getType();
		}
	}	

	class JumpContext
	{
		public LinkedList<Integer> beginPatches = new LinkedList<Integer>();
		public LinkedList<Integer> endPatches = new LinkedList<Integer>();
		public Stack<Boolean> and_notOr_stack = new Stack<Boolean>();
		public int ifElsePatch = 0;
		public boolean hasOr = false;
		public boolean isWhile = false;
		public boolean isAndSubcontext = false;
		public boolean isOrSubcontext = false;
		public int top = 0;
	}
	
	Stack<JumpContext> jumpContextStack = new Stack<JumpContext>();

	public Obj copyObj(Obj obj)
	{
		Obj newobj = new Obj(obj.getKind(), obj.getName(), obj.getType(), obj.getAdr(), obj.getLevel());
		SymbolDataStructure newSymbols = new HashTableDataStructure();
		for (Obj o : obj.getLocalSymbols())
			newSymbols.insertKey(o);
		newobj.setLocals(newSymbols);
		
		return newobj;
	}

	public Obj insertSymbol(int kind, String name, Struct type, int line)
	{
		Obj obj = MyTab.currentScope.findSymbol(name);
		boolean inherited = (obj instanceof MyObj) && ((MyObj)obj).isInherited;
		
		if (obj != null && obj != MyTab.noObj && !inherited)
		{
			parser.reportSemanticError("Symbol " + name + " already defined in the current scope", line);
			return MyTab.noObj;
		}
		else
			return MyTab.insert(kind, name, type, classContext);
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Type ::= IDENT 
            {
              Obj RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeObjNode = MyTab.find(typeName);
	if (typeObjNode == null || typeObjNode == MyTab.noObj)
	{
		parser.reportSemanticError("Type " + typeName + " undefined", typeNameleft);
		RESULT = MyTab.noObj;
	}
	else
	{
		if (typeObjNode.getKind() == Obj.Type)
			RESULT = typeObjNode;
		else
		{
			parser.reportSemanticError(typeName + " is not a type", typeNameleft);
			RESULT = MyTab.noObj;
		}
	}
	currentDeclTypeObj = RESULT;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Value ::= STRING_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	int size = value.length() + 1;
	MyCode.heapPutWord(size);
	int addr = MyCode.heapSize;
	for (int i = 0; i < value.length(); ++i)
		MyCode.heapPutByte((byte)((int)value.charAt(i)));
	MyCode.heapPutByte((byte)0);
				
	RESULT = new Info(addr, MyTab.stringType);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Value ::= BOOL_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean value = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.boolType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Value ::= CHAR_CONST 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character value = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.charType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Value ::= NUMBER 
            {
              Info RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer value = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = new Info(value, MyTab.intType); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Relop ::= LESSE 
            {
              Integer RESULT =null;
		 RESULT = MyCode.le; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Relop ::= LESS 
            {
              Integer RESULT =null;
		 RESULT = MyCode.lt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Relop ::= GRTE 
            {
              Integer RESULT =null;
		 RESULT = MyCode.ge; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Relop ::= GRT 
            {
              Integer RESULT =null;
		 RESULT = MyCode.gt; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Relop ::= NEQ 
            {
              Integer RESULT =null;
		 RESULT = MyCode.ne; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Relop ::= EQ 
            {
              Integer RESULT =null;
		 RESULT = MyCode.eq; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Mulop ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Mulop ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Mulop ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Addop ::= SUB 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Addop ::= ADD 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Factor ::= LPAREN Expr RPAREN 
            {
              Info RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	RESULT = exprInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Factor ::= NEW IDENT LBRACKET error RBRACKET 
            {
              Info RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong allocation expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Factor ::= NEW IDENT LBRACKET Expr RBRACKET 
            {
              Info RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else if (!exprInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Expression must be of int type", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
	{
		MyCode.put(MyCode.newarray);
		if (typeName.equals("char"))
			MyCode.put(0);
		else
			MyCode.put(1);
		RESULT = new Info(0, new MyStruct(Struct.Array, typeObj.getType()));
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Factor ::= NEW IDENT 
            {
              Info RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeObj = MyTab.find(typeName);
	if (typeObj == null || typeObj.getKind() != Obj.Type || typeObj.getType().getKind() != Struct.Class)
	{
		parser.reportSemanticError("Identifier " + typeName + " is not a class name", typeNameleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = new Info(0, typeObj.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Factor ::= Value 
            {
              Info RESULT =null;
		int valueInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int valueInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info valueInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	//if (valueInfo.type == MyTab.stringType)
		//MyCode.bload(new Obj(Obj.Con, "tempConst_" + valueInfo.value.toString(), valueInfo.type, valueInfo.getIntVal(), -2));
	//else
		MyCode.load(new Obj(Obj.Con, "tempConst_" + valueInfo.value.toString(), valueInfo.type, valueInfo.getIntVal(), -2));
	RESULT = valueInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Factor ::= FuncCall 
            {
              Info RESULT =null;
		int funcCallInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int funcCallInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info funcCallInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = funcCallInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Factor ::= Designator 
            {
              Info RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	MyCode.load(desigInfo.obj);
	RESULT = new Info(0, desigInfo.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Term ::= Factor 
            {
              Info RESULT =null;
		int factorInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info factorInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (negation)
	{
		negation = false;
		MyCode.put(MyCode.neg);
	}
	RESULT = factorInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Term ::= Term Mulop Factor 
            {
              Info RESULT =null;
		int termInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int termInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info termInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opStringleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opStringright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String opString = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int factorInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int factorInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info factorInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!(factorInfo.type.equals(MyTab.intType) && termInfo.type.equals(MyTab.intType)))
	{
		parser.reportSemanticError("Operator " + opString + " allowed only on int type", termInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
	{
		if (opString.equals("*"))
			MyCode.put(MyCode.mul);
		else if (opString.equals("/"))
			MyCode.put(MyCode.div);
		else
			MyCode.put(MyCode.rem);
		RESULT = new Info(0, MyTab.intType);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TermList ::= Term 
            {
              Info RESULT =null;
		int termInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = termInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TermList ::= TermList Addop Term 
            {
              Info RESULT =null;
		int leftInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info leftInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opStringleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opStringright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String opString = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info rightInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (leftInfo.type.equals(MyTab.intType) && rightInfo.type.equals(MyTab.intType) ||
		leftInfo.type.equals(MyTab.stringType) && rightInfo.type.equals(MyTab.stringType) && opString.equals("+"))
	{
		if (opString.equals("+"))
		{
			if (leftInfo.type.equals(MyTab.stringType))
			{
				Obj strAddObj = MyTab.find("_addStrings");
				int offset = strAddObj.getAdr() - MyCode.pc;
				MyCode.put(MyCode.call);
				MyCode.put2(offset);
			}
			else
				MyCode.put(MyCode.add);
		}
		else
			MyCode.put(MyCode.sub);
		RESULT = new Info(0, leftInfo.type);
	}
	else
	{
		RESULT = new Info(0, MyTab.noType);
		if (opString.equals("+"))
			parser.reportSemanticError("Operator " + opString + " allowed only on string and int operands", leftInfoleft);
		else
			parser.reportSemanticError("Operator " + opString + " allowed only on int operands", leftInfoleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= TermList 
            {
              Info RESULT =null;
		int termListInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termListInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = termListInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= SUB NT$4 TermList 
            {
              Info RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Info) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int termListInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int termListInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info termListInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!termListInfo.type.equals(MyTab.intType))
	{
		parser.reportSemanticError("Unary negation operator allowed only on int type", termListInfoleft);
		RESULT = new Info(0, MyTab.noType);
	}
	else
		RESULT = termListInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$4 ::= 
            {
              Info RESULT =null;
 negation = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",73, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DesignatorPart ::= LBRACKET error RBRACKET 
            {
              DesignatorInfo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong index expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ArrayAddr ::= 
            {
              Object RESULT =null;
		
	if (designatorTop().designatorStart)
		MyCode.load(designatorTop().obj);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ArrayAddr",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DesignatorPart ::= LBRACKET ArrayAddr Expr RBRACKET 
            {
              DesignatorInfo RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (designatorTop().obj.getType().getKind() != Struct.Array)
		parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not an array", exprInfoleft);
	else
	{
		if (!exprInfo.type.equals(MyTab.intType))
			parser.reportSemanticError("Index expression is not of int type", exprInfoleft);
		else
		{
			designatorTop().obj = new MyObj(MyObj.Elem, "tempObj_elem", designatorTop().obj.getType().getElemType());
			designatorTop().isElementOfArray = true;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DesignatorPart ::= DOT IDENT 
            {
              DesignatorInfo RESULT =null;
		int desigNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String desigName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (designatorTop().obj != MyTab.noObj)
	{
		if (designatorTop().obj.getType().getKind() != Struct.Class)
			parser.reportSemanticError("Identifier " + designatorTop().obj.getName() + " is not of class type", desigNameleft);
		else
		{
			designatorTop().designatorStart = false;
			Obj desigObj = MyTab.noObj;
			boolean found = false;
			for (Obj o : designatorTop().obj.getType().getMembers())
			{
				if (o.getName().equals(desigName))
				{
					desigObj = o;
					found = true;
					break;
				}
			}
			
			if (!found)
			{
				String className = MyTab.getTypeName(designatorTop().obj.getType());
				parser.reportSemanticError("Identifier " + desigName + " is not a member of the class " + className, desigNameleft);
			}
			else
			{
				designatorTop().obj = desigObj;
				designatorTop().isClassMember = true;
			}
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DesignatorList ::= DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DesignatorList ::= DesignatorList DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DesignatorListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DesignatorListOpt ::= DesignatorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DesignatorName ::= IDENT 
            {
              Object RESULT =null;
		int desigNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String desigName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj designatorObj = MyTab.find(desigName);
	if (designatorObj == null || designatorObj == MyTab.noObj)
	{
		parser.reportSemanticError("Identifier " + desigName + " undefined", desigNameleft);
		designatorChainsStack.push(new DesignatorInfo(MyTab.noObj));
	}
	else
	{
		designatorChainsStack.push(new DesignatorInfo(designatorObj));
		if (designatorTop().obj instanceof MyObj && ((MyObj)designatorTop().obj).isClassMember)
				designatorTop().isClassMember = true;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorName",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Designator ::= DesignatorName DesignatorListOpt 
            {
              DesignatorInfo RESULT =null;
		
	RESULT = designatorChainsStack.pop();
	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ActualParam ::= Expr 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (currentMethodCallObj != MyTab.noObj)
	{
		int forParsCnt = (isThisCall) ? currentMethodCallObj.getLevel() - 1 : currentMethodCallObj.getLevel();
		if (currentActualParam + 1 > forParsCnt)
		{
			parser.reportSemanticError("To many arguments", exprInfoleft);
		}
		else
		{
			Obj paramObj = null;
			Iterator<Obj> it = currentMethodCallObj.getLocalSymbols().iterator();
			if (isThisCall)
				it.next();
			for (int i = 0; i <= currentActualParam; ++i)
				paramObj = it.next();
			if (exprInfo.type != MyTab.noType && !paramObj.getType().compatibleWith(exprInfo.type)
				&& !(exprInfo.type.getKind() == Struct.Array && paramObj.getType().getKind() == Struct.Array && paramObj.getType().getElemType() == MyTab.noType))
			{
				parser.reportSemanticError("Actual parameter on position " + currentActualParam + ". type (" + MyTab.getTypeName(exprInfo.type)
										 + ") doesn't match with formal parameter type (" + MyTab.getTypeName(paramObj.getType()) + ")", exprInfoleft);
			}
		}
		currentActualParam++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParam",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ActualParamsList ::= ActualParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ActualParamsList ::= ActualParamsList COMMA ActualParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ActualParamsOpt ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong actual parameters in function call", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ActualParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ActualParamsOpt ::= ActualParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // CallName ::= Designator 
            {
              DesignatorInfo RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	currentActualParam = 0;
	isThisCall = false;
	if (desigInfo.obj != MyTab.noObj && desigInfo.obj.getKind() != Obj.Meth)
	{
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a global function or a method", desigInfoleft);
		//RESULT = new Info(0, MyTab.noType);
		currentMethodCallObj = MyTab.noObj;
	}
	else
	{
		currentMethodCallObj = desigInfo.obj;
		Struct methType = desigInfo.obj.getType();
		if (desigInfo.isClassMember)
			isThisCall = true;
		//RESULT = new Info(0, methType);
	}
	RESULT = desigInfo;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CallName",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // FuncCall ::= CallName LPAREN error SEMI 
            {
              Info RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong function call", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncCall",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // FuncCall ::= CallName LPAREN ActualParamsOpt RPAREN 
            {
              Info RESULT =null;
		int callInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int callInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo callInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	RESULT = new Info(0, currentMethodCallObj.getType());
	
	int forParsCnt = (isThisCall) ? currentMethodCallObj.getLevel() - 1 : currentMethodCallObj.getLevel();

	if (currentActualParam < forParsCnt)
		parser.reportSemanticError("Insufficient number of arguments", lleft);
	else
	{
		int offset = callInfo.obj.getAdr() - MyCode.pc;
		MyCode.put(MyCode.call);
		MyCode.put2(offset);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FuncCall",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SimpleStatement ::= LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SimpleStatement ::= PRINT LPAREN error COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.reportRecoveredSyntaxError("Print function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SimpleStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}
	else
	{
		if (exprInfo.type == MyTab.intType)
		{
			MyCode.loadConst(num);
			MyCode.put(MyCode.print);
		}
		else if (exprInfo.type == MyTab.charType)
		{
			MyCode.loadConst(num);
			MyCode.put(MyCode.bprint);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SimpleStatement ::= PRINT LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.reportRecoveredSyntaxError("Print function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SimpleStatement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (!(exprInfo.type.equals(MyTab.intType) || exprInfo.type.equals(MyTab.charType) || exprInfo.type.equals(MyTab.boolType) || exprInfo.type.equals(MyTab.stringType)))
	{
		parser.reportSemanticError("Expression must be of int, char, bool or string type", exprInfoleft);
	}
	else
	{
		if (exprInfo.type == MyTab.intType)
		{
			MyCode.loadConst(10);
			MyCode.put(MyCode.print);
		}
		else if (exprInfo.type == MyTab.charType)
		{
			MyCode.loadConst(1);
			MyCode.put(MyCode.bprint);
		}
		else if (exprInfo.type == MyTab.stringType)
		{
			Obj printStrObj = MyTab.find("_printString");
			int offset = printStrObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(offset);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SimpleStatement ::= READ LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.reportRecoveredSyntaxError("Read function call error", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SimpleStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	else if (desigInfo.obj != MyTab.noObj && !(desigInfo.obj.getType().equals(MyTab.intType) || desigInfo.obj.getType().equals(MyTab.charType) || desigInfo.obj.getType().equals(MyTab.boolType) || desigInfo.obj.getType().equals(MyTab.stringType)))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a of int, char, bool or string type", desigInfoleft);
	else
	{
		if (desigInfo.obj.getType().equals(MyTab.intType))
		{
			MyCode.put(MyCode.read);
			MyCode.store(desigInfo.obj);
		}
		else if (desigInfo.obj.getType().equals(MyTab.charType))
		{
			MyCode.put(MyCode.bread);
			MyCode.store(desigInfo.obj);
		}
		else if (desigInfo.obj.getType().equals(MyTab.stringType))
		{
			Obj readStrObj = MyTab.find("_readString");
			int offset = readStrObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(offset);
			MyCode.store(desigInfo.obj);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SimpleStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	returnFound = true;
	
	if (!isVoid && (retType == null || !retType.equals(exprInfo.type)))
	{
		parser.reportSemanticError("Expresion type doesn't match method return type", exprInfoleft);
	}
	else
	{
		MyCode.put(MyCode.exit);
		MyCode.put(MyCode.return_);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SimpleStatement ::= RETURN SEMI 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	voidReturnFound = true;
	if (!isVoid)
		parser.reportSemanticError("Method must return a value", rleft);
	else
	{
		MyCode.put(MyCode.exit);
		MyCode.put(MyCode.return_);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SimpleStatement ::= BREAK SEMI 
            {
              Object RESULT =null;
		int brleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (whileCnt == 0)//inWhile == false)
		parser.reportSemanticError("Break statement allowed only in while loop", brleft);
	else
	{
		MyCode.putJump(0);
		int i = jumpContextStack.size() - 1;
		while(jumpContextStack.get(i).isWhile == false)
			i--;
		jumpContextStack.get(i).endPatches.add(MyCode.pc - 2);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IncDec ::= DEC 
            {
              Object RESULT =null;
		
	MyCode.loadConst(1);
	MyCode.put(MyCode.sub);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IncDec ::= INC 
            {
              Object RESULT =null;
		
	MyCode.loadConst(1);
	MyCode.put(MyCode.add);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SimpleStatement ::= Designator NT$3 IncDec SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	if (!(desigInfo.obj.getKind() == Obj.Var || desigInfo.obj.getKind() == Obj.Fld))
		parser.reportSemanticError("Identifier " + desigInfo.obj.getName() + " must be a variable, an array element or a field", desigInfoleft);
	else if (!desigInfo.getType().equals(MyTab.intType))
		parser.reportSemanticError("Unary inc/dec allowed only on integers", desigInfoleft);
	else
		MyCode.store(desigInfo.obj);


              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$3 ::= 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 MyCode.load(desigInfo.obj); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",72, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SimpleStatement ::= FuncCall SEMI 
            {
              Object RESULT =null;
		int funcInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info funcInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (funcInfo.type != MyTab.noType)
	{
		MyCode.put(MyCode.pop);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SimpleStatement ::= Designator ASSIGN error SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong assignment expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SimpleStatement ::= Designator ASSIGN Expr SEMI 
            {
              Object RESULT =null;
		int desigInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int desigInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		DesignatorInfo desigInfo = (DesignatorInfo)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int exInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int exInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Info exInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	if (desigInfo.obj.getKind() != Obj.Var && desigInfo.obj.getKind() != Obj.Fld && desigInfo.obj.getKind() != Obj.Elem)
    {
    	parser.reportSemanticError("Incorrect assignement, destination must be a variable, an element of array or a field", exInfoleft);
    }
	else
	{
		Struct destType, srcType;
		destType = desigInfo.getType();
		srcType = exInfo.type;	
						
		if (!srcType.compatibleWith(destType))
		{
			if (!(srcType instanceof MyStruct && ((MyStruct)srcType).superClass.getType().compatibleWith(destType)))
				parser.reportSemanticError("Destination and source type must be compatibile",exInfoleft);
		}
		else
		{
			MyCode.store(desigInfo.obj);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CondFact ::= Expr 
            {
              Integer RESULT =null;
		int exprInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int exprInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info exprInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!exprInfo.type.equals(MyTab.boolType))
		parser.reportSemanticError("Expression must be of boolean type", exprInfoleft);
	else
		RESULT = MyCode.noRelop;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CondFact ::= Expr Relop Expr 
            {
              Integer RESULT =null;
		int leftInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int leftInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Info leftInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int rightInfoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int rightInforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info rightInfo = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!leftInfo.type.compatibleWith(rightInfo.type))
		parser.reportSemanticError("Expressions not compatible", rightInfoleft);
	else if ((leftInfo.type.getKind() == Struct.Class || leftInfo.type.getKind() == Struct.Array) && (!(op.equals(MyCode.ne) || op.equals(MyCode.eq))))
		parser.reportSemanticError("Only != and == operators allowed on class and array types", leftInfoleft);
	else
	{
		if (leftInfo.type.equals(MyTab.stringType))
		{
			Obj strEqObj = MyTab.find("_stringEquals");
			int addr = strEqObj.getAdr() - MyCode.pc;
			MyCode.put(MyCode.call);
			MyCode.put2(addr);
			RESULT = MyCode.noRelop;
		}
		else
			RESULT = op;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CondTerm ::= CondFact 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = op; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CondTerm ::= CondTerm LAND NT$2 CondFact 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer opl = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer opr = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = MyCode.checked;
	
	if (opr != MyCode.checked)
	{
		if (opr == MyCode.noRelop)
		{
			MyCode.loadConst(0);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(opr, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$2 ::= 
            {
              Integer RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer opl = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

	if (!jumpContextStack.peek().isAndSubcontext)
	{
		JumpContext newJumpContext = new JumpContext();
		newJumpContext.isWhile = jumpContextStack.peek().isWhile;
		newJumpContext.top = jumpContextStack.peek().top;
		jumpContextStack.push(newJumpContext);
		jumpContextStack.peek().isAndSubcontext = true;
	}
	if (opl != MyCode.checked)
	{
		if (opl == MyCode.noRelop)
		{
			MyCode.loadConst(0);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(opl, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",71, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Condition ::= error 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong condition expression", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Condition ::= CondTerm 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	RESULT = op;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BigCondition ::= Condition 
            {
              Integer RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
	RESULT = op;
	if (!(jumpContextStack.peek().isOrSubcontext || jumpContextStack.peek().isAndSubcontext))
	{
		if (op == MyCode.noRelop)
		{
			MyCode.loadConst(1);
			MyCode.putFalseJump(MyCode.eq, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(op, 0);
			jumpContextStack.peek().endPatches.add(MyCode.pc - 2);
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("BigCondition",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Condition ::= Condition LOR NT$1 CondTerm 
            {
              Integer RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Integer opl = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int oprleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int oprright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer opr = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = MyCode.checked;
	JumpContext tmp = null;
	if (jumpContextStack.peek().isAndSubcontext)
		tmp = jumpContextStack.pop();
	if (opr != MyCode.checked)
	{
		jumpContextStack.peek().hasOr = true;
		if (opr == MyCode.noRelop)
		{
			MyCode.loadConst(1);
			MyCode.putFalseJump(MyCode.ne, 0);
			jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
		}
		else
		{
			MyCode.putFalseJump(MyCode.inverse[opr], 0);
			jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
		}
	}
	else
		jumpContextStack.peek().hasOr = false;
	if (tmp != null)
		jumpContextStack.push(tmp);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$1 ::= 
            {
              Integer RESULT =null;
		int oplleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer opl = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

		if (opl != MyCode.checked)
		{
			jumpContextStack.peek().isOrSubcontext = true;
			if (opl == MyCode.noRelop)
			{
				MyCode.loadConst(1);
				MyCode.putFalseJump(MyCode.ne, 0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
			}
			else
			{
				MyCode.putFalseJump(MyCode.inverse[opl], 0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
			}
		}
		else
		{
			if (jumpContextStack.peek().isAndSubcontext)
			{
				JumpContext myJump = jumpContextStack.pop();
				MyCode.putJump(0);
				jumpContextStack.peek().beginPatches.add(MyCode.pc - 2);
				for (Integer addr : myJump.endPatches)
					MyCode.fixup(addr);
			}
		}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",70, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PatchElseEnd ::= 
            {
              Object RESULT =null;
		
	MyCode.fixup(jumpContextStack.peek().ifElsePatch);
	jumpContextStack.pop();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PatchElseEnd",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // JumpEnd ::= 
            {
              Object RESULT =null;
		
	MyCode.putJump(0);
	JumpContext tmp = null;
	if (jumpContextStack.peek().isAndSubcontext)
		tmp = jumpContextStack.pop();
	jumpContextStack.peek().ifElsePatch = MyCode.pc - 2;
	if (tmp != null)
		jumpContextStack.push(tmp);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("JumpEnd",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // PatchEnd ::= 
            {
              Object RESULT =null;
		
	JumpContext myJump = jumpContextStack.peek();
	boolean isAndSubcontext = myJump.isAndSubcontext;
	if (myJump.isWhile)
	{
		//inWhile = false;
		whileCnt--;
		MyCode.putJump(myJump.top);
	}
	for (Integer addr : myJump.endPatches)
		MyCode.fixup(addr);
	if (isAndSubcontext)
		jumpContextStack.pop();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PatchEnd",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // PatchBegin ::= 
            {
              Object RESULT =null;
			
			
	JumpContext myJump = jumpContextStack.peek();
	JumpContext temp = null;
	if (myJump.isAndSubcontext)
	{
		temp = jumpContextStack.pop();
		myJump = jumpContextStack.peek();
	}
	if (myJump.hasOr)
	{
		MyCode.putJump(0);
		myJump.endPatches.add(MyCode.pc - 2);
	}
	for (Integer addr : myJump.beginPatches)
		MyCode.fixup(addr);
	if (temp != null)
		jumpContextStack.push(temp);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PatchBegin",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PushJumpContext ::= 
            {
              Object RESULT =null;
		
	jumpContextStack.push(new JumpContext());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("PushJumpContext",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LoopKeyword ::= WHILE 
            {
              Integer RESULT =null;
		
	jumpContextStack.peek().isWhile = true;
	jumpContextStack.peek().top = MyCode.pc;
	//inWhile = true;
	whileCnt++;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LoopKeyword",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ClosedStatement ::= PushJumpContext LoopKeyword LPAREN BigCondition RPAREN PatchBegin ClosedStatement PatchEnd 
            {
              Object RESULT =null;
		
	jumpContextStack.pop();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ClosedStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin ClosedStatement JumpEnd ELSE PatchEnd ClosedStatement PatchElseEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ClosedStatement ::= SimpleStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OpenStatement ::= PushJumpContext LoopKeyword LPAREN BigCondition RPAREN PatchBegin OpenStatement PatchEnd 
            {
              Object RESULT =null;
		
	jumpContextStack.pop();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OpenStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin ClosedStatement JumpEnd ELSE PatchEnd OpenStatement PatchElseEnd 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-11)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OpenStatement ::= PushJumpContext IF LPAREN BigCondition RPAREN PatchBegin Statement PatchEnd 
            {
              Object RESULT =null;
		 jumpContextStack.pop(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Statement ::= ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Statement ::= OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementListOpt ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LocalVarDeclLine ::= Type VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclLine",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LocalVarDeclList ::= IDENT error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LocalVarDeclList ::= LocalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LocalVarDeclList ::= LocalVarDeclLine LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LocalVarDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LocalVarDeclOpt ::= LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormalParam ::= Type IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;
		int typeObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int typeObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj typeObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, new MyStruct(Struct.Array, typeObj.getType()), paramNameleft);
		formalParamsCnt++;
	}	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormalParam ::= Type IDENT 
            {
              Object RESULT =null;
		int typeObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int typeObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj typeObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int paramNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int paramNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String paramName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (typeObj != MyTab.noObj && currentMethodObj != MyTab.noObj)
	{
		RESULT = insertSymbol(Obj.Var, paramName, typeObj.getType(), paramNameleft);
		formalParamsCnt++;
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormalParam ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of formal parameters", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormalParamsList ::= FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormalParamsList ::= FormalParamsList COMMA FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormalParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormalParamsOpt ::= FormalParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodName ::= IDENT 
            {
              Obj RESULT =null;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = insertSymbol(Obj.Meth, methodName, retType, methodNameleft);
	currentMethodObj = RESULT;
	
	if (RESULT != MyTab.noObj)
	{
		if (methodName.equals("main"))
		{
			mainFound = true;
			if (!isVoid)
				parser.reportSemanticError("Method \"main\" must return void", methodNameleft);
		}
		MyTab.openScope(RESULT);
		parser.log.debug("**** Method \"" + methodName + "\" scope opened");
		declKind = Obj.Var;
		if (classContext)
			insertSymbol(Obj.Var, "this", currentClassObj.getType(), methodNameleft);
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodName",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // RetType ::= IDENT 
            {
              Object RESULT =null;
		int retTypeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTypeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String retTypeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj retObj = MyTab.find(retTypeName);
	isVoid = false;
	
	if (retObj == null || retObj == MyTab.noObj)
		parser.reportSemanticError("Return type " + retTypeName + "undefined", retTypeNameleft);
	else
		if (retObj.getKind() != Obj.Type)
			parser.reportSemanticError("Return identifier " + retTypeName + " is not a type", retTypeNameleft);
		else
			retType = retObj.getType();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // RetType ::= VOID 
            {
              Object RESULT =null;
		 isVoid = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodStart ::= 
            {
              Object RESULT =null;
		
	currentMethodObj.setAdr(MyCode.pc);
	if (currentMethodObj.getName().equals("main"))
		MyCode.mainPc = MyCode.pc;
	int forParsCnt = (classContext) ? formalParamsCnt + 1 : formalParamsCnt;
	currentMethodObj.setLevel(forParsCnt);
	MyCode.put(MyCode.enter);
	MyCode.put(currentMethodObj.getLevel());
	MyCode.put(MyTab.currentScope().getnVars());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodStart",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= RetType MethodName LPAREN FormalParamsOpt RPAREN LocalVarDeclOpt LBRACE MethodStart StatementListOpt RBRACE 
            {
              Object RESULT =null;
		int methObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		Obj methObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		
	if (currentMethodObj != MyTab.noObj)
	{
		if (!isVoid && !returnFound)
			parser.reportSemanticError("No return statement in method " + methObj.getName(), methObjleft);
		else if (isVoid && returnFound)
			parser.reportSemanticError("Return statement in void method " + methObj.getName(), methObjleft);
		else if (isVoid && !voidReturnFound)
		{	
			MyCode.put(MyCode.exit);
			MyCode.put(MyCode.return_);
		}
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
		MyTab.closeScope();
		parser.log.debug("**** Method \"" + methObj.getName() + "\" scope closed");
	}
	formalParamsCnt = 0;
	declKind = Obj.NO_VALUE;
	currentMethodObj = MyTab.noObj;
	retType = MyTab.noType;
	returnFound = false;
	voidReturnFound = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclOpt ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassMethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethodDeclOpt ::= LBRACE MethodDeclOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FieldDeclLine ::= Type VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclLine",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldsDeclList ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FieldsDeclList ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldsDeclList ::= FieldDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldsDeclList ::= FieldDeclLine FieldsDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldsDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldsDeclOpt ::= FieldsDeclList 
            {
              Object RESULT =null;
		
	if (currentClassObj != MyTab.noObj)
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExtendsOpt ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Error in extension", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExtendsOpt ::= EXTENDS IDENT 
            {
              Object RESULT =null;
		int superClassNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int superClassNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String superClassName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj obj = MyTab.find(superClassName);
	if (obj == null || (obj.getKind() != Obj.Type && obj.getType().getKind() != Struct.Class))
		parser.reportSemanticError("Super class " + superClassName + " undefined", superClassNameleft);
	else
	{
		superClassObj = obj;
		((MyStruct)currentClassObj.getType()).superClass = superClassObj;
		for (Obj o : superClassObj.getType().getMembers())
		{
			Obj newObj = insertSymbol(o.getKind(), o.getName(), o.getType(), superClassNameleft);
			newObj.setAdr(o.getAdr());
			newObj.setFpPos(o.getFpPos());

			SymbolDataStructure newSymbols = new HashTableDataStructure();
			for (Obj loc : o.getLocalSymbols())
				newSymbols.insertKey(loc);
			newObj.setLocals(newSymbols);
			((MyObj)newObj).isInherited = true;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ClassName ::= IDENT 
            {
              Obj RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	MyStruct struct = new MyStruct(Struct.Class);
	RESULT = insertSymbol(Obj.Type, className, struct, classNameleft);
	if (RESULT != MyTab.noObj)
	{
		MyTab.openScope(RESULT);
		MyTab.getCurrentScope().isClassScope = true;
		parser.log.debug("Otvoren opseg klase \"" + className +"\"");
		declKind = Obj.Fld;
		struct.myObj = RESULT;
	}
	currentClassObj = RESULT;
	classContext = true;	

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassName",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS ClassName ExtendsOpt LBRACE FieldsDeclOpt ClassMethodDeclOpt RBRACE 
            {
              Object RESULT =null;
		int classObjleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classObjright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		Obj classObj = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		
	if (currentClassObj != MyTab.noObj)
	{
		MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj.getType());
		MyTab.closeScope();
		parser.log.debug("Zatvoren opseg klase \"" + classObj.getName() +"\"");
	}
	currentClassObj = MyTab.noObj;
	superClassObj = MyTab.noObj;
	declKind = Obj.NO_VALUE;
	classContext = false;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VarDecl ::= IDENT LBRACKET RBRACKET 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, new MyStruct(Struct.Array, currentDeclTypeObj.getType()), varNameleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VarDecl ::= IDENT 
            {
              Obj RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (currentDeclTypeObj != MyTab.noObj && !(currentMethodObj == MyTab.noObj && declKind == Obj.Var && MyTab.currLevel > 0))
		RESULT = insertSymbol(declKind, varName, currentDeclTypeObj.getType(), varNameleft);

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarDeclSequence ::= VarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // GlobalVarDeclSequence ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of variable", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // GlobalVarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // GlobalVarDeclSequence ::= GlobalVarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // GlobalVarDeclLine ::= Type NT$0 GlobalVarDeclSequence SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 currentDeclTypeObj = MyTab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclLine",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$0 ::= 
            {
              Object RESULT =null;
 declKind = Obj.Var; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= IDENT ASSIGN Value 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int infoleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int inforight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Info info = (Info)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	if (!info.type.assignableTo(currentDeclTypeObj.getType()))
		parser.reportSemanticError("Type " + MyTab.getTypeObj(info.type).getName() + " not assignable to type " + currentDeclTypeObj.getName(), infoleft);
	else
	{
		RESULT = insertSymbol(Obj.Con, constName, currentDeclTypeObj.getType(), infoleft);
		((Obj)RESULT).setAdr(info.getIntVal());
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ConstDeclSequence ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDeclSequence ::= ConstDeclSequence COMMA ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDeclLine ::= CONST error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.reportRecoveredSyntaxError("Wrong declaration of constant", eleft); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclLine",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclLine ::= CONST Type ConstDeclSequence SEMI 
            {
              Object RESULT =null;
		 currentDeclTypeObj = MyTab.noObj; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclLine",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= GlobalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclarationsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclarationsOpt ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int pNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int pNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String pName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = insertSymbol(Obj.Prog, pName, MyTab.noType, pNameleft);
	if (RESULT == MyTab.noObj)
		parser.reportSemanticError("Invalid program name", pNameleft);
	MyTab.openScope(RESULT);
	parser.log.debug("****Program scope opened****");

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LibFunctions ::= MethodDeclOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LibFunctions",68, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName GlobalDeclarationsOpt LBRACE MethodDeclOpt RBRACE LibFunctions 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
	MyCode.dataSize = Tab.currentScope().getnVars();
	MyTab.chainLocalSymbols(MyTab.getCurrentScope().outerScopeObj);
	MyTab.closeScope();
	if (!mainFound)
		parser.reportSemanticError("Method \"main\" not found", lleft);
	parser.log.debug("****Program scope closed****");
	MyTab.dump(new MySymbolTableVisitor());

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

