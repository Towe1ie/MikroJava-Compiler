
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 25 04:51:20 CEST 2015
//----------------------------------------------------

package rs.ac.bg.etf.ln110181d;

import java_cup.runtime.*;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.ln110181d.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 25 04:51:20 CEST 2015
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\010\000\002\002\004\000\002\003" +
    "\003\000\002\003\002\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\006\000\002\007\005\000\002\007\003\000\002" +
    "\010\003\000\002\010\005\000\002\011\005\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\022\005" +
    "\000\002\022\003\000\002\021\003\000\002\021\005\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\034\011\000\002\035\004\000\002\035" +
    "\003\000\002\035\002\000\002\016\003\000\002\016\002" +
    "\000\002\017\004\000\002\017\003\000\002\017\003\000" +
    "\002\017\004\000\002\020\005\000\002\036\005\000\002" +
    "\036\002\000\002\023\003\000\002\023\002\000\002\024" +
    "\004\000\002\024\003\000\002\025\013\000\002\013\003" +
    "\000\002\013\002\000\002\014\004\000\002\014\003\000" +
    "\002\014\005\000\002\014\004\000\002\015\005\000\002" +
    "\026\003\000\002\026\003\000\002\027\003\000\002\027" +
    "\002\000\002\030\005\000\002\030\003\000\002\030\003" +
    "\000\002\031\004\000\002\031\006\000\002\040\003\000" +
    "\002\040\002\000\002\041\004\000\002\041\003\000\002" +
    "\037\003\000\002\037\003\000\002\042\007\000\002\042" +
    "\011\000\002\042\007\000\002\043\003\000\002\043\011" +
    "\000\002\043\007\000\002\057\005\000\002\057\003\000" +
    "\002\057\003\000\002\060\005\000\002\060\003\000\002" +
    "\061\005\000\002\061\003\000\002\044\005\000\002\044" +
    "\004\000\002\044\004\000\002\044\005\000\002\044\007" +
    "\000\002\044\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\011\000\002\044\011\000\002\044\005\000\002" +
    "\045\004\000\002\047\003\000\002\047\002\000\002\050" +
    "\004\000\002\050\003\000\002\051\004\000\002\051\005" +
    "\000\002\051\005\000\002\046\004\000\002\046\004\000" +
    "\002\046\005\000\002\046\004\000\002\046\003\000\002" +
    "\046\003\000\002\053\004\000\002\053\003\000\002\055" +
    "\005\000\002\055\003\000\002\054\005\000\002\054\003" +
    "\000\002\056\003\000\002\056\006\000\002\056\003\000" +
    "\002\056\004\000\002\056\007\000\002\056\007\000\002" +
    "\056\005\000\002\032\003\000\002\032\002\000\002\032" +
    "\003\000\002\033\005\000\002\033\003\000\002\062\003" +
    "\000\002\062\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\004\005\001\002\000\004\002\341\001" +
    "\002\000\004\021\006\001\002\000\012\006\016\010\017" +
    "\021\007\055\ufffe\001\002\000\006\003\333\021\102\001" +
    "\002\000\012\006\ufffb\010\ufffb\021\ufffb\055\ufffb\001\002" +
    "\000\012\006\ufffa\010\ufffa\021\ufffa\055\ufffa\001\002\000" +
    "\012\006\ufff9\010\ufff9\021\ufff9\055\ufff9\001\002\000\012" +
    "\006\ufffc\010\ufffc\021\ufffc\055\ufffc\001\002\000\012\006" +
    "\016\010\017\021\007\055\uffff\001\002\000\004\055\327" +
    "\001\002\000\004\021\036\001\002\000\004\021\020\001" +
    "\002\000\006\003\022\021\024\001\002\000\006\046\ufff6" +
    "\047\ufff6\001\002\000\006\046\ufff5\047\ufff5\001\002\000" +
    "\006\046\034\047\033\001\002\000\004\045\025\001\002" +
    "\000\012\022\031\023\032\024\030\025\026\001\002\000" +
    "\044\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044" +
    "\uffe8\046\uffe8\047\uffe8\052\uffe8\054\uffe8\001\002\000\006" +
    "\046\ufff4\047\ufff4\001\002\000\044\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\046\uffe9\047\uffe9\052" +
    "\uffe9\054\uffe9\001\002\000\044\026\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\044\uffeb\046\uffeb\047\uffeb\052\uffeb" +
    "\054\uffeb\001\002\000\044\026\uffea\027\uffea\030\uffea\031" +
    "\uffea\032\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\046\uffea\047\uffea\052\uffea\054" +
    "\uffea\001\002\000\006\003\022\021\024\001\002\000\012" +
    "\006\ufff8\010\ufff8\021\ufff8\055\ufff8\001\002\000\006\046" +
    "\ufff7\047\ufff7\001\002\000\010\003\041\020\040\055\uffe4" +
    "\001\002\000\004\055\043\001\002\000\004\021\042\001" +
    "\002\000\004\055\uffe5\001\002\000\004\055\uffe6\001\002" +
    "\000\012\003\046\021\047\055\uffe2\056\uffe2\001\002\000" +
    "\012\003\046\021\047\055\uffe0\056\uffe0\001\002\000\006" +
    "\055\uffe3\056\uffe3\001\002\000\010\046\325\055\uffdf\056" +
    "\uffdf\001\002\000\004\021\102\001\002\000\006\055\051" +
    "\056\uffdb\001\002\000\010\016\061\021\060\056\uffd9\001" +
    "\002\000\004\056\053\001\002\000\012\006\uffe7\010\uffe7" +
    "\021\uffe7\055\uffe7\001\002\000\010\016\061\021\060\056" +
    "\uffda\001\002\000\004\056\321\001\002\000\004\021\062" +
    "\001\002\000\010\016\uffd7\021\uffd7\056\uffd7\001\002\000" +
    "\004\021\uffcd\001\002\000\004\021\uffce\001\002\000\004" +
    "\051\063\001\002\000\010\003\065\021\067\052\uffcb\001" +
    "\002\000\006\047\uffc9\052\uffc9\001\002\000\006\047\uffc8" +
    "\052\uffc8\001\002\000\006\047\317\052\uffcc\001\002\000" +
    "\004\021\314\001\002\000\004\052\071\001\002\000\006" +
    "\021\074\055\uffd4\001\002\000\004\055\uffd5\001\002\000" +
    "\004\055\111\001\002\000\006\003\100\021\102\001\002" +
    "\000\006\021\074\055\uffd2\001\002\000\004\055\uffd3\001" +
    "\002\000\006\046\107\047\106\001\002\000\006\046\105" +
    "\055\uffd0\001\002\000\006\046\uffee\047\uffee\001\002\000" +
    "\010\046\uffed\047\uffed\053\103\001\002\000\004\054\104" +
    "\001\002\000\006\046\uffec\047\uffec\001\002\000\004\055" +
    "\uffd1\001\002\000\004\021\102\001\002\000\006\021\uffcf" +
    "\055\uffcf\001\002\000\006\046\uffef\047\uffef\001\002\000" +
    "\024\005\130\011\121\013\125\014\112\015\126\017\114" +
    "\021\116\055\113\056\uffc4\001\002\000\004\051\305\001" +
    "\002\000\024\005\130\011\121\013\125\014\112\015\126" +
    "\017\114\021\116\055\113\056\uffc4\001\002\000\004\051" +
    "\276\001\002\000\024\005\uffc0\011\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\017\uffc0\021\uffc0\055\uffc0\056\uffc0\001\002\000" +
    "\060\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\267" +
    "\051\uffa5\052\uffa5\053\266\054\uffa5\001\002\000\012\033" +
    "\250\034\251\045\254\051\252\001\002\000\024\005\130" +
    "\011\121\013\125\014\112\015\126\017\114\021\116\055" +
    "\113\056\uffc5\001\002\000\004\051\217\001\002\000\024" +
    "\005\uffc2\011\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2\021" +
    "\uffc2\055\uffc2\056\uffc2\001\002\000\026\005\uffbc\007\uffbc" +
    "\011\uffbc\013\uffbc\014\uffbc\015\uffbc\017\uffbc\021\uffbc\055" +
    "\uffbc\056\uffbc\001\002\000\024\005\uffc1\011\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\017\uffc1\021\uffc1\055\uffc1\056\uffc1\001" +
    "\002\000\004\051\200\001\002\000\024\012\135\021\116" +
    "\022\031\023\032\024\030\025\026\027\140\046\137\051" +
    "\144\001\002\000\004\056\132\001\002\000\004\046\131" +
    "\001\002\000\026\005\uffb1\007\uffb1\011\uffb1\013\uffb1\014" +
    "\uffb1\015\uffb1\017\uffb1\021\uffb1\055\uffb1\056\uffb1\001\002" +
    "\000\010\016\uffd6\021\uffd6\056\uffd6\001\002\000\036\026" +
    "\156\027\155\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\043\uff98\044\uff98\046\uff98\047\uff98\052\uff98\054" +
    "\uff98\001\002\000\004\046\177\001\002\000\004\021\171" +
    "\001\002\000\046\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\046\uff93\047\uff93\051\161\052\uff93\054" +
    "\uff93\001\002\000\026\005\uffb0\007\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\017\uffb0\021\uffb0\055\uffb0\056\uffb0\001" +
    "\002\000\020\012\135\021\116\022\031\023\032\024\030" +
    "\025\026\051\144\001\002\000\044\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\032\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\046\uff91\047\uff91\052" +
    "\uff91\054\uff91\001\002\000\044\026\uff96\027\uff96\030\150" +
    "\031\151\032\147\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\042\uff96\043\uff96\044\uff96\046\uff96\047\uff96\052\uff96" +
    "\054\uff96\001\002\000\044\026\uff94\027\uff94\030\uff94\031" +
    "\uff94\032\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\046\uff94\047\uff94\052\uff94\054" +
    "\uff94\001\002\000\022\012\135\021\116\022\031\023\032" +
    "\024\030\025\026\027\140\051\144\001\002\000\004\052" +
    "\146\001\002\000\044\026\uff8d\027\uff8d\030\uff8d\031\uff8d" +
    "\032\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042" +
    "\uff8d\043\uff8d\044\uff8d\046\uff8d\047\uff8d\052\uff8d\054\uff8d" +
    "\001\002\000\020\012\uff83\021\uff83\022\uff83\023\uff83\024" +
    "\uff83\025\uff83\051\uff83\001\002\000\020\012\uff85\021\uff85" +
    "\022\uff85\023\uff85\024\uff85\025\uff85\051\uff85\001\002\000" +
    "\020\012\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84" +
    "\051\uff84\001\002\000\020\012\135\021\116\022\031\023" +
    "\032\024\030\025\026\051\144\001\002\000\044\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\046\uff95" +
    "\047\uff95\052\uff95\054\uff95\001\002\000\036\026\156\027" +
    "\155\035\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\046\uff99\047\uff99\052\uff99\054\uff99\001" +
    "\002\000\020\012\uff86\021\uff86\022\uff86\023\uff86\024\uff86" +
    "\025\uff86\051\uff86\001\002\000\020\012\uff87\021\uff87\022" +
    "\uff87\023\uff87\024\uff87\025\uff87\051\uff87\001\002\000\020" +
    "\012\135\021\116\022\031\023\032\024\030\025\026\051" +
    "\144\001\002\000\044\026\uff97\027\uff97\030\150\031\151" +
    "\032\147\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\046\uff97\047\uff97\052\uff97\054\uff97" +
    "\001\002\000\026\003\165\012\135\021\116\022\031\023" +
    "\032\024\030\025\026\027\140\051\144\052\uff8b\001\002" +
    "\000\004\052\170\001\002\000\006\047\uff88\052\uff88\001" +
    "\002\000\006\047\166\052\uff8c\001\002\000\004\052\uff8a" +
    "\001\002\000\022\012\135\021\116\022\031\023\032\024" +
    "\030\025\026\027\140\051\144\001\002\000\006\047\uff89" +
    "\052\uff89\001\002\000\044\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\032\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\046\uff92\047\uff92\052\uff92\054" +
    "\uff92\001\002\000\046\026\uff90\027\uff90\030\uff90\031\uff90" +
    "\032\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\043\uff90\044\uff90\046\uff90\047\uff90\052\uff90\053\172" +
    "\054\uff90\001\002\000\024\003\174\012\135\021\116\022" +
    "\031\023\032\024\030\025\026\027\140\051\144\001\002" +
    "\000\004\054\176\001\002\000\004\054\175\001\002\000" +
    "\044\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032\uff8e\035\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\046\uff8e\047\uff8e\052\uff8e\054\uff8e\001\002\000\044" +
    "\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\035\uff8f\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\046\uff8f\047\uff8f\052\uff8f\054\uff8f\001\002\000\026\005" +
    "\uffaf\007\uffaf\011\uffaf\013\uffaf\014\uffaf\015\uffaf\017\uffaf" +
    "\021\uffaf\055\uffaf\056\uffaf\001\002\000\024\003\202\012" +
    "\135\021\116\022\031\023\032\024\030\025\026\027\140" +
    "\051\144\001\002\000\006\047\211\052\212\001\002\000" +
    "\006\047\203\052\204\001\002\000\004\022\206\001\002" +
    "\000\004\046\205\001\002\000\026\005\uffab\007\uffab\011" +
    "\uffab\013\uffab\014\uffab\015\uffab\017\uffab\021\uffab\055\uffab" +
    "\056\uffab\001\002\000\004\052\207\001\002\000\004\046" +
    "\210\001\002\000\026\005\uffa9\007\uffa9\011\uffa9\013\uffa9" +
    "\014\uffa9\015\uffa9\017\uffa9\021\uffa9\055\uffa9\056\uffa9\001" +
    "\002\000\004\022\214\001\002\000\004\046\213\001\002" +
    "\000\026\005\uffac\007\uffac\011\uffac\013\uffac\014\uffac\015" +
    "\uffac\017\uffac\021\uffac\055\uffac\056\uffac\001\002\000\004" +
    "\052\215\001\002\000\004\046\216\001\002\000\026\005" +
    "\uffaa\007\uffaa\011\uffaa\013\uffaa\014\uffaa\015\uffaa\017\uffaa" +
    "\021\uffaa\055\uffaa\056\uffaa\001\002\000\024\003\222\012" +
    "\135\021\116\022\031\023\032\024\030\025\026\027\140" +
    "\051\144\001\002\000\010\043\uffb5\044\uffb5\052\uffb5\001" +
    "\002\000\024\035\237\036\244\037\241\040\243\041\242" +
    "\042\240\043\uffb3\044\uffb3\052\uffb3\001\002\000\004\052" +
    "\uffb7\001\002\000\010\043\234\044\233\052\uffb8\001\002" +
    "\000\004\052\225\001\002\000\022\005\130\011\121\013" +
    "\125\014\112\015\126\017\114\021\116\055\113\001\002" +
    "\000\026\005\uffc0\007\230\011\uffc0\013\uffc0\014\uffc0\015" +
    "\uffc0\017\uffc0\021\uffc0\055\uffc0\056\uffc0\001\002\000\024" +
    "\005\uffbf\011\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\021" +
    "\uffbf\055\uffbf\056\uffbf\001\002\000\022\005\130\011\121" +
    "\013\125\014\112\015\126\017\114\021\116\055\113\001" +
    "\002\000\026\005\uffbb\007\uffbb\011\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\055\uffbb\056\uffbb\001\002\000" +
    "\024\005\uffbe\011\uffbe\013\uffbe\014\uffbe\015\uffbe\017\uffbe" +
    "\021\uffbe\055\uffbe\056\uffbe\001\002\000\022\012\135\021" +
    "\116\022\031\023\032\024\030\025\026\027\140\051\144" +
    "\001\002\000\022\012\135\021\116\022\031\023\032\024" +
    "\030\025\026\027\140\051\144\001\002\000\010\043\uffb6" +
    "\044\uffb6\052\uffb6\001\002\000\006\043\234\052\uffb9\001" +
    "\002\000\022\012\uff82\021\uff82\022\uff82\023\uff82\024\uff82" +
    "\025\uff82\027\uff82\051\uff82\001\002\000\022\012\uff7d\021" +
    "\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\027\uff7d\051\uff7d" +
    "\001\002\000\022\012\uff80\021\uff80\022\uff80\023\uff80\024" +
    "\uff80\025\uff80\027\uff80\051\uff80\001\002\000\022\012\uff7e" +
    "\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\027\uff7e\051" +
    "\uff7e\001\002\000\022\012\uff7f\021\uff7f\022\uff7f\023\uff7f" +
    "\024\uff7f\025\uff7f\027\uff7f\051\uff7f\001\002\000\022\012" +
    "\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\027\uff81" +
    "\051\uff81\001\002\000\022\012\135\021\116\022\031\023" +
    "\032\024\030\025\026\027\140\051\144\001\002\000\010" +
    "\043\uffb4\044\uffb4\052\uffb4\001\002\000\024\005\uffc3\011" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3\055\uffc3" +
    "\056\uffc3\001\002\000\004\046\uff9b\001\002\000\004\046" +
    "\uff9a\001\002\000\026\003\261\012\135\021\116\022\031" +
    "\023\032\024\030\025\026\027\140\051\144\052\uff8b\001" +
    "\002\000\004\046\257\001\002\000\024\003\256\012\135" +
    "\021\116\022\031\023\032\024\030\025\026\027\140\051" +
    "\144\001\002\000\004\046\uff9f\001\002\000\004\046\uff9e" +
    "\001\002\000\026\005\uffb2\007\uffb2\011\uffb2\013\uffb2\014" +
    "\uffb2\015\uffb2\017\uffb2\021\uffb2\055\uffb2\056\uffb2\001\002" +
    "\000\004\052\262\001\002\000\006\046\uff9c\052\uff8a\001" +
    "\002\000\004\046\uff9d\001\002\000\054\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036" +
    "\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\054\uffa7\001" +
    "\002\000\060\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032\uffa3" +
    "\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002\000" +
    "\060\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\267" +
    "\051\uffa6\052\uffa6\053\266\054\uffa6\001\002\000\024\003" +
    "\272\012\135\021\116\022\031\023\032\024\030\025\026" +
    "\027\140\051\144\001\002\000\004\021\270\001\002\000" +
    "\060\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2" +
    "\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002\000\004\054" +
    "\274\001\002\000\004\054\273\001\002\000\060\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\001\002\000\060\026\uffa1\027\uffa1" +
    "\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036" +
    "\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\001\002\000\060\026\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037" +
    "\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\001\002\000\024\003\222\012\135\021\116\022\031" +
    "\023\032\024\030\025\026\027\140\051\144\001\002\000" +
    "\004\052\300\001\002\000\022\005\130\011\121\013\125" +
    "\014\112\015\126\017\114\021\116\055\113\001\002\000" +
    "\026\005\uffba\007\uffba\011\uffba\013\uffba\014\uffba\015\uffba" +
    "\017\uffba\021\uffba\055\uffba\056\uffba\001\002\000\024\005" +
    "\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd" +
    "\055\uffbd\056\uffbd\001\002\000\004\056\304\001\002\000" +
    "\026\005\uffa8\007\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8" +
    "\017\uffa8\021\uffa8\055\uffa8\056\uffa8\001\002\000\006\003" +
    "\306\021\116\001\002\000\004\052\312\001\002\000\004" +
    "\052\310\001\002\000\004\046\311\001\002\000\026\005" +
    "\uffae\007\uffae\011\uffae\013\uffae\014\uffae\015\uffae\017\uffae" +
    "\021\uffae\055\uffae\056\uffae\001\002\000\004\046\313\001" +
    "\002\000\026\005\uffad\007\uffad\011\uffad\013\uffad\014\uffad" +
    "\015\uffad\017\uffad\021\uffad\055\uffad\056\uffad\001\002\000" +
    "\010\047\uffc7\052\uffc7\053\315\001\002\000\004\054\316" +
    "\001\002\000\006\047\uffc6\052\uffc6\001\002\000\004\021" +
    "\067\001\002\000\006\047\uffca\052\uffca\001\002\000\004" +
    "\056\uffdc\001\002\000\010\016\uffd8\021\uffd8\056\uffd8\001" +
    "\002\000\006\046\324\047\106\001\002\000\012\003\uffdd" +
    "\021\uffdd\055\uffdd\056\uffdd\001\002\000\006\055\uffde\056" +
    "\uffde\001\002\000\006\055\uffe1\056\uffe1\001\002\000\010" +
    "\016\061\021\060\056\uffd9\001\002\000\004\056\331\001" +
    "\002\000\004\002\001\001\002\000\012\006\ufffd\010\ufffd" +
    "\021\ufffd\055\ufffd\001\002\000\006\046\ufff0\047\ufff0\001" +
    "\002\000\006\046\337\047\336\001\002\000\006\046\ufff1" +
    "\047\ufff1\001\002\000\004\021\102\001\002\000\012\006" +
    "\ufff3\010\ufff3\021\ufff3\055\ufff3\001\002\000\006\046\ufff2" +
    "\047\ufff2\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\014\004\013\005\012\006\010" +
    "\011\007\034\011\001\001\000\006\012\333\021\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\331\006\010\011\007\034" +
    "\011\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\022\010\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\016" +
    "\047\017\044\020\043\001\001\000\006\017\325\020\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\100\022\322\001\001\000\004\036\051\001\001\000\012" +
    "\023\054\024\053\025\056\026\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\025\321\026\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\067\030\065\031\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\072\014\071\015\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\100\022\076" +
    "\001\001\000\006\014\075\015\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\037\121\040\126\041\117\042" +
    "\123\043\114\044\122\045\116\001\001\000\002\001\001" +
    "\000\020\037\121\040\302\041\117\042\123\043\114\044" +
    "\122\045\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\262\050\264\051\263\001\001\000\004\046" +
    "\252\001\001\000\014\037\246\042\123\043\114\044\122" +
    "\045\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\045\135\052\140\053\133\054\141\055\132\056\142\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\045\135\052\140\054\141\055\153\056\142\001" +
    "\001\000\002\001\001\000\004\063\151\001\001\000\002" +
    "\001\001\000\016\045\135\052\140\053\144\054\141\055" +
    "\132\056\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\135\052\140\056\152\001\001\000\002\001\001" +
    "\000\004\062\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\045\135\052\140\054\157\056\142\001\001" +
    "\000\004\063\151\001\001\000\022\032\161\033\163\045" +
    "\135\052\140\053\162\054\141\055\132\056\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\045\135\052\140\053\166\054\141" +
    "\055\132\056\142\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\045\135\052\140\053\172" +
    "\054\141\055\132\056\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\045\135\052\140\053\200\054\141\055" +
    "\132\056\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\045\135" +
    "\052\140\053\220\054\141\055\132\056\142\057\223\060" +
    "\222\061\217\001\001\000\002\001\001\000\004\064\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\226\042\123\043\225\044\122\045\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\042" +
    "\231\043\230\044\122\045\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\045\135\052\140\053\220\054" +
    "\141\055\132\056\142\060\235\061\217\001\001\000\020" +
    "\045\135\052\140\053\220\054\141\055\132\056\142\061" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\045\135" +
    "\052\140\053\245\054\141\055\132\056\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\032\257\033\163\045\135\052\140\053" +
    "\162\054\141\055\132\056\142\001\001\000\002\001\001" +
    "\000\016\045\135\052\140\053\254\054\141\055\132\056" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\274" +
    "\001\001\000\016\045\135\052\140\053\270\054\141\055" +
    "\132\056\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\045\135\052\140" +
    "\053\220\054\141\055\132\056\142\057\276\060\222\061" +
    "\217\001\001\000\002\001\001\000\012\042\301\043\300" +
    "\044\122\045\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\327\024\053" +
    "\025\056\026\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\337\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null)
	{
		if (s.value != null)
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " " + s.value.toString());
		}
		else
		{
			log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") " + " NULLL!!!");
		}
	}

	return s;

    }


	Logger log = Logger.getLogger(getClass());

	public void report_fatal_error(String message, Object info) throws java.lang.Exception
	{
		done_parsing();
		report_error(message, info);
	}

	public void syntax_error(Symbol cur_token)
	{
		report_error("\nSintaksna greska ", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception
	{
		report_fatal_error("Fatalna greska, parsiranje se ne moze nastviti", cur_token);
	}

	public void report_error(String message, Object info)
	{
		//dump_stack();
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
		{
			msg.append("na liniji ").append(((Symbol)info).left).append(" i koloni ").append(((Symbol)info).right);
			msg.append("\nNeocekivan simbol " + (((Symbol)info).value));
		}
		log.error(msg.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {
  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= LESSE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= LESS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= GRTE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= GRT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= NEQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= EQ 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Mulop ::= MOD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Addop ::= SUB 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Addop ::= ADD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ActualParamsList ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ActualParamsList ::= ActualParamsList COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsList",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActualParamsOpt ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u parametrima u pozivu funkcije!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActualParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ActualParamsOpt ::= ActualParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActualParamsOpt",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= LPAREN Expr RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= NEW IDENT LBRACKET error RBRACKET 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u izrazu za alociranje!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= NEW IDENT LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NEW IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Value 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Designator LPAREN ActualParamsOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Factor ::= Designator 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Term ::= Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Term ::= Term Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TermList ::= Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TermList ::= TermList Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TermList",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= SUB TermList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DesignatorRight ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DesignatorRight ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DesignatorRight ::= LPAREN error 
            {
              Object RESULT =null;
		 parser.log.debug("Greska pri pozivu funkcije!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DesignatorRight ::= LPAREN ActualParamsOpt RPAREN 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DesignatorRight ::= ASSIGN error 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u dodeli vrednosti!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DesignatorRight ::= ASSIGN Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorRight",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DesignatorPart ::= LBRACKET error RBRACKET 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u izrazu za indeksiranje!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DesignatorPart ::= LBRACKET Expr RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DesignatorPart ::= DOT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorPart",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DesignatorList ::= DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DesignatorList ::= DesignatorList DesignatorPart 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorList",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DesignatorListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DesignatorListOpt ::= DesignatorList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("DesignatorListOpt",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Designator ::= IDENT DesignatorListOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SimpleStatement ::= LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SimpleStatement ::= PRINT LPAREN error COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u pozivu funkcije print!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SimpleStatement ::= PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SimpleStatement ::= PRINT LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u pozivu funkcije print!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SimpleStatement ::= PRINT LPAREN Expr RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SimpleStatement ::= READ LPAREN error RPAREN SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u pozivu funkcije read!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SimpleStatement ::= READ LPAREN Designator RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SimpleStatement ::= RETURN Expr SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SimpleStatement ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SimpleStatement ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SimpleStatement ::= Designator DesignatorRight SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("SimpleStatement",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CondTerm ::= CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CondTerm ::= CondTerm LAND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Condition ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u uslovu!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Condition ::= CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Condition ::= CondTerm LOR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ClosedStatement ::= WHILE LPAREN Condition RPAREN ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ClosedStatement ::= IF LPAREN Condition RPAREN ClosedStatement ELSE ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ClosedStatement ::= SimpleStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClosedStatement",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OpenStatement ::= WHILE LPAREN Condition RPAREN OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OpenStatement ::= IF LPAREN Condition RPAREN ClosedStatement ELSE OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OpenStatement ::= IF LPAREN Condition RPAREN Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("OpenStatement",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Statement ::= ClosedStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Statement ::= OpenStatement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // StatementList ::= Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StatementListOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StatementListOpt ::= StatementList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementListOpt",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormalParam ::= IDENT IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormalParam ::= IDENT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParam",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormalParamsList ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija formalnih parametara"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormalParamsList ::= FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormalParamsList ::= FormalParamsList COMMA FormalParam 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsList",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormalParamsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormalParamsOpt ::= FormalParamsList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormalParamsOpt",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RetType ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // RetType ::= VOID 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RetType",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LocalVarDeclLine ::= IDENT VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclLine",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LocalVarDeclList ::= IDENT error 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija promelnjive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LocalVarDeclList ::= IDENT error SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija promelnjive"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LocalVarDeclList ::= LocalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LocalVarDeclList ::= LocalVarDeclLine LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LocalVarDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LocalVarDeclOpt ::= LocalVarDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDecl ::= RetType IDENT LPAREN FormalParamsOpt RPAREN LocalVarDeclOpt LBRACE StatementListOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclOpt ::= MethodDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclOpt",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassMethodDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ClassMethodDeclOpt ::= LBRACE MethodDeclOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassMethodDeclOpt",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FieldDeclLine ::= IDENT VarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldDeclLine",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FieldsDeclList ::= error SEMI 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija promenljive!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FieldsDeclList ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija promenljive!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FieldsDeclList ::= FieldDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FieldsDeclList ::= FieldDeclLine FieldsDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclList",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FieldsDeclOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FieldsDeclOpt ::= FieldsDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FieldsDeclOpt",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExtendsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExtendsOpt ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Greska u prosirenju natklase"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ExtendsOpt ::= EXTENDS IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtendsOpt",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ClassDecl ::= CLASS IDENT ExtendsOpt LBRACE FieldsDeclOpt ClassMethodDeclOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Value ::= STRING_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Value ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Value ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Value ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Value",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarDecl ::= IDENT LBRACKET RBRACKET 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDeclSequence ::= VarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDeclSequence",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // GlobalVarDeclSequence ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija promenljive!"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // GlobalVarDeclSequence ::= VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // GlobalVarDeclSequence ::= GlobalVarDeclSequence COMMA VarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclSequence",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // GlobalVarDeclLine ::= IDENT GlobalVarDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalVarDeclLine",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ConstDecl ::= IDENT ASSIGN Value 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ConstDecl ::= error 
            {
              Object RESULT =null;
		 parser.log.debug("Pogresna deklaracija konstante"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDeclSequence ::= ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ConstDeclSequence ::= ConstDeclSequence COMMA ConstDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclSequence",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDeclLine ::= CONST IDENT ConstDeclSequence SEMI 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDeclLine",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= ClassDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ConstDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecl ::= GlobalVarDeclLine 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDeclList ::= GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GlobalDeclList ::= GlobalDeclList GlobalDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // GlobalDeclarationsOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // GlobalDeclarationsOpt ::= GlobalDeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("GlobalDeclarationsOpt",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM IDENT GlobalDeclarationsOpt LBRACE MethodDeclOpt RBRACE 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

