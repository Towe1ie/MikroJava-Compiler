//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 30 02:59:28 CEST 2015
//----------------------------------------------------

package rs.ac.bg.etf.ln110181d;

import java_cup.runtime.*;
import org.apache.log4j.Logger;
import rs.ac.bg.etf.ln110181d.util.*;
import rs.etf.pp1.symboltable.*;
import rs.etf.pp1.symboltable.concepts.*;

/**
 * CUP v0.11a beta 20060608 generated parser.
 * 
 * @version Sat May 30 02:59:28 CEST 2015
 */
public class MJParser extends java_cup.runtime.lr_parser
{

	/** Default constructor. */
	public MJParser()
	{
		super();
	}

	/** Constructor which sets the default scanner. */
	public MJParser(java_cup.runtime.Scanner s)
	{
		super(s);
	}

	/** Constructor which sets the default scanner. */
	public MJParser(java_cup.runtime.Scanner s,
			java_cup.runtime.SymbolFactory sf)
	{
		super(s, sf);
	}

	/** Production table. */
	protected static final short _production_table[][] = unpackFromStrings(new String[] { "\000\211\000\002\002\010\000\002\002\004\000\002\004"
			+ "\003\000\002\004\002\000\002\005\004\000\002\005\003"
			+ "\000\002\006\003\000\002\006\003\000\002\006\003\000"
			+ "\002\007\006\000\002\010\005\000\002\010\003\000\002"
			+ "\011\003\000\002\011\005\000\002\013\005\000\002\014"
			+ "\005\000\002\014\003\000\002\014\003\000\002\024\005"
			+ "\000\002\024\003\000\002\023\003\000\002\023\005\000"
			+ "\002\070\003\000\002\070\003\000\002\070\003\000\002"
			+ "\070\003\000\002\037\011\000\002\040\004\000\002\040"
			+ "\003\000\002\040\002\000\002\020\003\000\002\020\002"
			+ "\000\002\021\004\000\002\021\003\000\002\021\003\000"
			+ "\002\021\004\000\002\022\005\000\002\041\005\000\002"
			+ "\041\002\000\002\025\003\000\002\025\002\000\002\026"
			+ "\004\000\002\026\003\000\002\027\013\000\002\015\003"
			+ "\000\002\015\002\000\002\016\004\000\002\016\003\000"
			+ "\002\016\005\000\002\016\004\000\002\017\005\000\002"
			+ "\030\003\000\002\030\003\000\002\031\003\000\002\031"
			+ "\002\000\002\032\005\000\002\032\003\000\002\032\004"
			+ "\000\002\033\004\000\002\033\006\000\002\044\003\000"
			+ "\002\044\002\000\002\045\004\000\002\045\003\000\002"
			+ "\043\003\000\002\043\003\000\002\046\007\000\002\046"
			+ "\011\000\002\046\007\000\002\047\003\000\002\047\011"
			+ "\000\002\047\007\000\002\062\005\000\002\062\003\000"
			+ "\002\062\004\000\002\063\005\000\002\063\003\000\002"
			+ "\064\005\000\002\064\003\000\002\050\005\000\002\050"
			+ "\004\000\002\050\004\000\002\050\005\000\002\050\007"
			+ "\000\002\050\007\000\002\050\007\000\002\050\007\000"
			+ "\002\050\011\000\002\050\011\000\002\050\005\000\002"
			+ "\051\004\000\002\053\003\000\002\053\002\000\002\054"
			+ "\004\000\002\054\003\000\002\055\004\000\002\055\005"
			+ "\000\002\055\005\000\002\052\004\000\002\052\004\000"
			+ "\002\052\005\000\002\052\004\000\002\052\003\000\002"
			+ "\052\003\000\002\056\004\000\002\056\003\000\002\060"
			+ "\005\000\002\060\003\000\002\057\005\000\002\057\003"
			+ "\000\002\061\003\000\002\061\006\000\002\061\003\000"
			+ "\002\061\004\000\002\061\007\000\002\061\007\000\002"
			+ "\061\005\000\002\034\003\000\002\034\002\000\002\034"
			+ "\003\000\002\035\005\000\002\035\003\000\002\065\003"
			+ "\000\002\065\003\000\002\066\003\000\002\066\003\000"
			+ "\002\066\003\000\002\067\003\000\002\067\003\000\002"
			+ "\067\003\000\002\067\003\000\002\067\003\000\002\067"
			+ "\003\000\002\003\003\000\002\012\003\000\002\042\003"
			+ "\000\002\036\003" });

	/** Access to production table. */
	public short[][] production_table()
	{
		return _production_table;
	}

	/** Parse-action table. */
	protected static final short[][] _action_table = unpackFromStrings(new String[] { "\000\345\000\004\004\005\001\002\000\004\002\347\001"
			+ "\002\000\004\021\007\001\002\000\012\006\017\010\020"
			+ "\021\010\055\ufffe\001\002\000\012\006\uff7c\010\uff7c\021"
			+ "\uff7c\055\uff7c\001\002\000\006\003\341\021\106\001\002"
			+ "\000\012\006\ufffb\010\ufffb\021\ufffb\055\ufffb\001\002\000"
			+ "\012\006\ufffa\010\ufffa\021\ufffa\055\ufffa\001\002\000\012"
			+ "\006\ufff9\010\ufff9\021\ufff9\055\ufff9\001\002\000\012\006"
			+ "\ufffc\010\ufffc\021\ufffc\055\ufffc\001\002\000\012\006\017"
			+ "\010\020\021\010\055\uffff\001\002\000\004\055\335\001"
			+ "\002\000\004\021\041\001\002\000\004\021\022\001\002"
			+ "\000\006\003\024\021\026\001\002\000\006\003\uff7b\021"
			+ "\uff7b\001\002\000\006\046\ufff6\047\ufff6\001\002\000\006"
			+ "\046\ufff5\047\ufff5\001\002\000\006\046\036\047\035\001"
			+ "\002\000\004\045\027\001\002\000\012\022\033\023\034"
			+ "\024\032\025\030\001\002\000\044\026\uffe8\027\uffe8\030"
			+ "\uffe8\031\uffe8\032\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8"
			+ "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\047\uffe8\052"
			+ "\uffe8\054\uffe8\001\002\000\006\046\ufff4\047\ufff4\001\002"
			+ "\000\044\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\035"
			+ "\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9"
			+ "\044\uffe9\046\uffe9\047\uffe9\052\uffe9\054\uffe9\001\002\000"
			+ "\044\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb"
			+ "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044"
			+ "\uffeb\046\uffeb\047\uffeb\052\uffeb\054\uffeb\001\002\000\044"
			+ "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\035\uffea\036"
			+ "\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea"
			+ "\046\uffea\047\uffea\052\uffea\054\uffea\001\002\000\006\003"
			+ "\024\021\026\001\002\000\012\006\ufff8\010\ufff8\021\ufff8"
			+ "\055\ufff8\001\002\000\006\046\ufff7\047\ufff7\001\002\000"
			+ "\010\003\044\020\043\055\uffe4\001\002\000\010\003\uff7a"
			+ "\020\uff7a\055\uff7a\001\002\000\004\055\046\001\002\000"
			+ "\004\021\045\001\002\000\004\055\uffe5\001\002\000\004"
			+ "\055\uffe6\001\002\000\012\003\051\021\052\055\uffe2\056"
			+ "\uffe2\001\002\000\012\003\051\021\052\055\uffe0\056\uffe0"
			+ "\001\002\000\006\055\uffe3\056\uffe3\001\002\000\010\046"
			+ "\333\055\uffdf\056\uffdf\001\002\000\004\021\106\001\002"
			+ "\000\006\055\054\056\uffdb\001\002\000\010\016\064\021"
			+ "\063\056\uffd9\001\002\000\004\056\056\001\002\000\012"
			+ "\006\uffe7\010\uffe7\021\uffe7\055\uffe7\001\002\000\010\016"
			+ "\064\021\063\056\uffda\001\002\000\004\056\327\001\002"
			+ "\000\004\021\065\001\002\000\010\016\uffd7\021\uffd7\056"
			+ "\uffd7\001\002\000\004\021\uffcd\001\002\000\004\021\uffce"
			+ "\001\002\000\004\051\uff79\001\002\000\004\051\067\001"
			+ "\002\000\010\003\071\021\073\052\uffcb\001\002\000\006"
			+ "\047\uffc9\052\uffc9\001\002\000\004\046\326\001\002\000"
			+ "\006\047\324\052\uffcc\001\002\000\004\021\321\001\002"
			+ "\000\004\052\075\001\002\000\006\021\100\055\uffd4\001"
			+ "\002\000\004\055\uffd5\001\002\000\004\055\115\001\002"
			+ "\000\006\003\104\021\106\001\002\000\006\021\100\055"
			+ "\uffd2\001\002\000\004\055\uffd3\001\002\000\006\046\113"
			+ "\047\112\001\002\000\006\046\111\055\uffd0\001\002\000"
			+ "\006\046\uffee\047\uffee\001\002\000\010\046\uffed\047\uffed"
			+ "\053\107\001\002\000\004\054\110\001\002\000\006\046"
			+ "\uffec\047\uffec\001\002\000\004\055\uffd1\001\002\000\004"
			+ "\021\106\001\002\000\006\021\uffcf\055\uffcf\001\002\000"
			+ "\006\046\uffef\047\uffef\001\002\000\024\005\134\011\125"
			+ "\013\131\014\116\015\132\017\120\021\122\055\117\056"
			+ "\uffc4\001\002\000\004\051\312\001\002\000\024\005\134"
			+ "\011\125\013\131\014\116\015\132\017\120\021\122\055"
			+ "\117\056\uffc4\001\002\000\004\051\303\001\002\000\024"
			+ "\005\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021"
			+ "\uffc0\055\uffc0\056\uffc0\001\002\000\060\026\uffa5\027\uffa5"
			+ "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036"
			+ "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5"
			+ "\045\uffa5\046\uffa5\047\uffa5\050\274\051\uffa5\052\uffa5\053"
			+ "\273\054\uffa5\001\002\000\012\033\255\034\256\045\261"
			+ "\051\257\001\002\000\024\005\134\011\125\013\131\014"
			+ "\116\015\132\017\120\021\122\055\117\056\uffc5\001\002"
			+ "\000\004\051\223\001\002\000\024\005\uffc2\011\uffc2\013"
			+ "\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\055\uffc2\056\uffc2"
			+ "\001\002\000\026\005\uffbc\007\uffbc\011\uffbc\013\uffbc\014"
			+ "\uffbc\015\uffbc\017\uffbc\021\uffbc\055\uffbc\056\uffbc\001\002"
			+ "\000\024\005\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\017"
			+ "\uffc1\021\uffc1\055\uffc1\056\uffc1\001\002\000\004\051\204"
			+ "\001\002\000\024\012\141\021\122\022\033\023\034\024"
			+ "\032\025\030\027\144\046\143\051\150\001\002\000\004"
			+ "\056\136\001\002\000\004\046\135\001\002\000\026\005"
			+ "\uffb1\007\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1"
			+ "\021\uffb1\055\uffb1\056\uffb1\001\002\000\010\016\uffd6\021"
			+ "\uffd6\056\uffd6\001\002\000\036\026\162\027\161\035\uff98"
			+ "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044"
			+ "\uff98\046\uff98\047\uff98\052\uff98\054\uff98\001\002\000\004"
			+ "\046\203\001\002\000\004\021\175\001\002\000\046\026"
			+ "\uff93\027\uff93\030\uff93\031\uff93\032\uff93\035\uff93\036\uff93"
			+ "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\046"
			+ "\uff93\047\uff93\051\165\052\uff93\054\uff93\001\002\000\026"
			+ "\005\uffb0\007\uffb0\011\uffb0\013\uffb0\014\uffb0\015\uffb0\017"
			+ "\uffb0\021\uffb0\055\uffb0\056\uffb0\001\002\000\020\012\141"
			+ "\021\122\022\033\023\034\024\032\025\030\051\150\001"
			+ "\002\000\044\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91"
			+ "\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043"
			+ "\uff91\044\uff91\046\uff91\047\uff91\052\uff91\054\uff91\001\002"
			+ "\000\044\026\uff96\027\uff96\030\154\031\155\032\153\035"
			+ "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96"
			+ "\044\uff96\046\uff96\047\uff96\052\uff96\054\uff96\001\002\000"
			+ "\044\026\uff94\027\uff94\030\uff94\031\uff94\032\uff94\035\uff94"
			+ "\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044"
			+ "\uff94\046\uff94\047\uff94\052\uff94\054\uff94\001\002\000\022"
			+ "\012\141\021\122\022\033\023\034\024\032\025\030\027"
			+ "\144\051\150\001\002\000\004\052\152\001\002\000\044"
			+ "\026\uff8d\027\uff8d\030\uff8d\031\uff8d\032\uff8d\035\uff8d\036"
			+ "\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d"
			+ "\046\uff8d\047\uff8d\052\uff8d\054\uff8d\001\002\000\020\012"
			+ "\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83\051\uff83"
			+ "\001\002\000\020\012\uff85\021\uff85\022\uff85\023\uff85\024"
			+ "\uff85\025\uff85\051\uff85\001\002\000\020\012\uff84\021\uff84"
			+ "\022\uff84\023\uff84\024\uff84\025\uff84\051\uff84\001\002\000"
			+ "\020\012\141\021\122\022\033\023\034\024\032\025\030"
			+ "\051\150\001\002\000\044\026\uff95\027\uff95\030\uff95\031"
			+ "\uff95\032\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95"
			+ "\042\uff95\043\uff95\044\uff95\046\uff95\047\uff95\052\uff95\054"
			+ "\uff95\001\002\000\036\026\162\027\161\035\uff99\036\uff99"
			+ "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\046"
			+ "\uff99\047\uff99\052\uff99\054\uff99\001\002\000\020\012\uff86"
			+ "\021\uff86\022\uff86\023\uff86\024\uff86\025\uff86\051\uff86\001"
			+ "\002\000\020\012\uff87\021\uff87\022\uff87\023\uff87\024\uff87"
			+ "\025\uff87\051\uff87\001\002\000\020\012\141\021\122\022"
			+ "\033\023\034\024\032\025\030\051\150\001\002\000\044"
			+ "\026\uff97\027\uff97\030\154\031\155\032\153\035\uff97\036"
			+ "\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97"
			+ "\046\uff97\047\uff97\052\uff97\054\uff97\001\002\000\026\003"
			+ "\171\012\141\021\122\022\033\023\034\024\032\025\030"
			+ "\027\144\051\150\052\uff8b\001\002\000\004\052\174\001"
			+ "\002\000\006\047\uff88\052\uff88\001\002\000\006\047\172"
			+ "\052\uff8c\001\002\000\004\052\uff8a\001\002\000\022\012"
			+ "\141\021\122\022\033\023\034\024\032\025\030\027\144"
			+ "\051\150\001\002\000\006\047\uff89\052\uff89\001\002\000"
			+ "\044\026\uff92\027\uff92\030\uff92\031\uff92\032\uff92\035\uff92"
			+ "\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044"
			+ "\uff92\046\uff92\047\uff92\052\uff92\054\uff92\001\002\000\046"
			+ "\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\035\uff90\036"
			+ "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90"
			+ "\046\uff90\047\uff90\052\uff90\053\176\054\uff90\001\002\000"
			+ "\024\003\200\012\141\021\122\022\033\023\034\024\032"
			+ "\025\030\027\144\051\150\001\002\000\004\054\202\001"
			+ "\002\000\004\054\201\001\002\000\044\026\uff8e\027\uff8e"
			+ "\030\uff8e\031\uff8e\032\uff8e\035\uff8e\036\uff8e\037\uff8e\040"
			+ "\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\046\uff8e\047\uff8e"
			+ "\052\uff8e\054\uff8e\001\002\000\044\026\uff8f\027\uff8f\030"
			+ "\uff8f\031\uff8f\032\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f"
			+ "\041\uff8f\042\uff8f\043\uff8f\044\uff8f\046\uff8f\047\uff8f\052"
			+ "\uff8f\054\uff8f\001\002\000\026\005\uffaf\007\uffaf\011\uffaf"
			+ "\013\uffaf\014\uffaf\015\uffaf\017\uffaf\021\uffaf\055\uffaf\056"
			+ "\uffaf\001\002\000\024\003\206\012\141\021\122\022\033"
			+ "\023\034\024\032\025\030\027\144\051\150\001\002\000"
			+ "\006\047\215\052\216\001\002\000\006\047\207\052\210"
			+ "\001\002\000\004\022\212\001\002\000\004\046\211\001"
			+ "\002\000\026\005\uffab\007\uffab\011\uffab\013\uffab\014\uffab"
			+ "\015\uffab\017\uffab\021\uffab\055\uffab\056\uffab\001\002\000"
			+ "\004\052\213\001\002\000\004\046\214\001\002\000\026"
			+ "\005\uffa9\007\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\017"
			+ "\uffa9\021\uffa9\055\uffa9\056\uffa9\001\002\000\004\022\220"
			+ "\001\002\000\004\046\217\001\002\000\026\005\uffac\007"
			+ "\uffac\011\uffac\013\uffac\014\uffac\015\uffac\017\uffac\021\uffac"
			+ "\055\uffac\056\uffac\001\002\000\004\052\221\001\002\000"
			+ "\004\046\222\001\002\000\026\005\uffaa\007\uffaa\011\uffaa"
			+ "\013\uffaa\014\uffaa\015\uffaa\017\uffaa\021\uffaa\055\uffaa\056"
			+ "\uffaa\001\002\000\024\003\226\012\141\021\122\022\033"
			+ "\023\034\024\032\025\030\027\144\051\150\001\002\000"
			+ "\010\043\uffb5\044\uffb5\052\uffb5\001\002\000\024\035\244"
			+ "\036\251\037\246\040\250\041\247\042\245\043\uffb3\044"
			+ "\uffb3\052\uffb3\001\002\000\004\046\243\001\002\000\010"
			+ "\043\240\044\237\052\uffb8\001\002\000\004\052\231\001"
			+ "\002\000\022\005\134\011\125\013\131\014\116\015\132"
			+ "\017\120\021\122\055\117\001\002\000\026\005\uffc0\007"
			+ "\234\011\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0"
			+ "\055\uffc0\056\uffc0\001\002\000\024\005\uffbf\011\uffbf\013"
			+ "\uffbf\014\uffbf\015\uffbf\017\uffbf\021\uffbf\055\uffbf\056\uffbf"
			+ "\001\002\000\022\005\134\011\125\013\131\014\116\015"
			+ "\132\017\120\021\122\055\117\001\002\000\026\005\uffbb"
			+ "\007\uffbb\011\uffbb\013\uffbb\014\uffbb\015\uffbb\017\uffbb\021"
			+ "\uffbb\055\uffbb\056\uffbb\001\002\000\024\005\uffbe\011\uffbe"
			+ "\013\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\055\uffbe\056"
			+ "\uffbe\001\002\000\022\012\141\021\122\022\033\023\034"
			+ "\024\032\025\030\027\144\051\150\001\002\000\022\012"
			+ "\141\021\122\022\033\023\034\024\032\025\030\027\144"
			+ "\051\150\001\002\000\010\043\uffb6\044\uffb6\052\uffb6\001"
			+ "\002\000\006\043\240\052\uffb9\001\002\000\004\052\uffb7"
			+ "\001\002\000\022\012\uff82\021\uff82\022\uff82\023\uff82\024"
			+ "\uff82\025\uff82\027\uff82\051\uff82\001\002\000\022\012\uff7d"
			+ "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\027\uff7d\051"
			+ "\uff7d\001\002\000\022\012\uff80\021\uff80\022\uff80\023\uff80"
			+ "\024\uff80\025\uff80\027\uff80\051\uff80\001\002\000\022\012"
			+ "\uff7e\021\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\027\uff7e"
			+ "\051\uff7e\001\002\000\022\012\uff7f\021\uff7f\022\uff7f\023"
			+ "\uff7f\024\uff7f\025\uff7f\027\uff7f\051\uff7f\001\002\000\022"
			+ "\012\uff81\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\027"
			+ "\uff81\051\uff81\001\002\000\022\012\141\021\122\022\033"
			+ "\023\034\024\032\025\030\027\144\051\150\001\002\000"
			+ "\010\043\uffb4\044\uffb4\052\uffb4\001\002\000\024\005\uffc3"
			+ "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3\055"
			+ "\uffc3\056\uffc3\001\002\000\004\046\uff9b\001\002\000\004"
			+ "\046\uff9a\001\002\000\026\003\266\012\141\021\122\022"
			+ "\033\023\034\024\032\025\030\027\144\051\150\052\uff8b"
			+ "\001\002\000\004\046\264\001\002\000\024\003\263\012"
			+ "\141\021\122\022\033\023\034\024\032\025\030\027\144"
			+ "\051\150\001\002\000\004\046\uff9f\001\002\000\004\046"
			+ "\uff9e\001\002\000\026\005\uffb2\007\uffb2\011\uffb2\013\uffb2"
			+ "\014\uffb2\015\uffb2\017\uffb2\021\uffb2\055\uffb2\056\uffb2\001"
			+ "\002\000\004\052\267\001\002\000\006\046\uff9c\052\uff8a"
			+ "\001\002\000\004\046\uff9d\001\002\000\054\026\uffa7\027"
			+ "\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7"
			+ "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044"
			+ "\uffa7\045\uffa7\046\uffa7\047\uffa7\051\uffa7\052\uffa7\054\uffa7"
			+ "\001\002\000\060\026\uffa3\027\uffa3\030\uffa3\031\uffa3\032"
			+ "\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3"
			+ "\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047"
			+ "\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\001\002"
			+ "\000\060\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033"
			+ "\uffa6\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6"
			+ "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050"
			+ "\274\051\uffa6\052\uffa6\053\273\054\uffa6\001\002\000\024"
			+ "\003\277\012\141\021\122\022\033\023\034\024\032\025"
			+ "\030\027\144\051\150\001\002\000\004\021\275\001\002"
			+ "\000\060\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033"
			+ "\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2"
			+ "\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050"
			+ "\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\001\002\000\004"
			+ "\054\301\001\002\000\004\054\300\001\002\000\060\026"
			+ "\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0"
			+ "\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043"
			+ "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0"
			+ "\052\uffa0\053\uffa0\054\uffa0\001\002\000\060\026\uffa1\027"
			+ "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1"
			+ "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044"
			+ "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1"
			+ "\053\uffa1\054\uffa1\001\002\000\060\026\uffa4\027\uffa4\030"
			+ "\uffa4\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4"
			+ "\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045"
			+ "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4"
			+ "\054\uffa4\001\002\000\024\003\226\012\141\021\122\022"
			+ "\033\023\034\024\032\025\030\027\144\051\150\001\002"
			+ "\000\004\052\305\001\002\000\022\005\134\011\125\013"
			+ "\131\014\116\015\132\017\120\021\122\055\117\001\002"
			+ "\000\026\005\uffba\007\uffba\011\uffba\013\uffba\014\uffba\015"
			+ "\uffba\017\uffba\021\uffba\055\uffba\056\uffba\001\002\000\024"
			+ "\005\uffbd\011\uffbd\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021"
			+ "\uffbd\055\uffbd\056\uffbd\001\002\000\004\056\311\001\002"
			+ "\000\026\005\uffa8\007\uffa8\011\uffa8\013\uffa8\014\uffa8\015"
			+ "\uffa8\017\uffa8\021\uffa8\055\uffa8\056\uffa8\001\002\000\006"
			+ "\003\313\021\122\001\002\000\004\052\317\001\002\000"
			+ "\004\052\315\001\002\000\004\046\316\001\002\000\026"
			+ "\005\uffae\007\uffae\011\uffae\013\uffae\014\uffae\015\uffae\017"
			+ "\uffae\021\uffae\055\uffae\056\uffae\001\002\000\004\046\320"
			+ "\001\002\000\026\005\uffad\007\uffad\011\uffad\013\uffad\014"
			+ "\uffad\015\uffad\017\uffad\021\uffad\055\uffad\056\uffad\001\002"
			+ "\000\010\047\uffc7\052\uffc7\053\322\001\002\000\004\054"
			+ "\323\001\002\000\006\047\uffc6\052\uffc6\001\002\000\004"
			+ "\021\073\001\002\000\006\047\uffca\052\uffca\001\002\000"
			+ "\006\047\uffc8\052\uffc8\001\002\000\004\056\uffdc\001\002"
			+ "\000\010\016\uffd8\021\uffd8\056\uffd8\001\002\000\006\046"
			+ "\332\047\112\001\002\000\012\003\uffdd\021\uffdd\055\uffdd"
			+ "\056\uffdd\001\002\000\006\055\uffde\056\uffde\001\002\000"
			+ "\006\055\uffe1\056\uffe1\001\002\000\010\016\064\021\063"
			+ "\056\uffd9\001\002\000\004\056\337\001\002\000\004\002"
			+ "\001\001\002\000\012\006\ufffd\010\ufffd\021\ufffd\055\ufffd"
			+ "\001\002\000\006\046\ufff0\047\ufff0\001\002\000\006\046"
			+ "\345\047\344\001\002\000\006\046\ufff1\047\ufff1\001\002"
			+ "\000\004\021\106\001\002\000\012\006\ufff3\010\ufff3\021"
			+ "\ufff3\055\ufff3\001\002\000\006\046\ufff2\047\ufff2\001\002"
			+ "\000\004\002\000\001\002" });

	/** Access to parse-action table. */
	public short[][] action_table()
	{
		return _action_table;
	}

	/** <code>reduce_goto</code> table. */
	protected static final short[][] _reduce_table = unpackFromStrings(new String[] { "\000\345\000\004\002\003\001\001\000\002\001\001\000"
			+ "\004\003\005\001\001\000\016\004\015\005\014\006\013"
			+ "\007\011\013\010\037\012\001\001\000\002\001\001\000"
			+ "\006\014\341\023\342\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\012\006"
			+ "\337\007\011\013\010\037\012\001\001\000\002\001\001"
			+ "\000\004\042\037\001\001\000\004\012\020\001\001\000"
			+ "\006\010\024\011\022\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\070\030\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\011\036\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\040\041\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\010\020\052\021\047\022\046\001\001\000"
			+ "\006\021\333\022\046\001\001\000\002\001\001\000\002"
			+ "\001\001\000\006\023\104\024\330\001\001\000\004\041"
			+ "\054\001\001\000\012\025\057\026\056\027\061\030\060"
			+ "\001\001\000\002\001\001\000\002\001\001\000\006\027"
			+ "\327\030\060\001\001\000\002\001\001\000\004\036\065"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\010\031\073"
			+ "\032\071\033\067\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\010\015\076\016\075\017\100\001\001\000\002\001"
			+ "\001\000\002\001\001\000\006\023\104\024\102\001\001"
			+ "\000\006\016\101\017\100\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\023\113\001\001\000\002\001\001\000\002"
			+ "\001\001\000\020\043\125\044\132\045\123\046\127\047"
			+ "\120\050\126\051\122\001\001\000\002\001\001\000\020"
			+ "\043\125\044\307\045\123\046\127\047\120\050\126\051"
			+ "\122\001\001\000\002\001\001\000\002\001\001\000\010"
			+ "\053\267\054\271\055\270\001\001\000\004\052\257\001"
			+ "\001\000\014\043\253\046\127\047\120\050\126\051\122"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\016\051\141"
			+ "\056\137\057\145\060\136\061\146\070\144\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\004\065\162\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\014"
			+ "\051\141\057\145\060\157\061\146\070\144\001\001\000"
			+ "\002\001\001\000\004\066\155\001\001\000\002\001\001"
			+ "\000\016\051\141\056\150\057\145\060\136\061\146\070"
			+ "\144\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\010\051"
			+ "\141\061\156\070\144\001\001\000\002\001\001\000\004"
			+ "\065\162\001\001\000\002\001\001\000\002\001\001\000"
			+ "\012\051\141\057\163\061\146\070\144\001\001\000\004"
			+ "\066\155\001\001\000\022\034\165\035\167\051\141\056"
			+ "\166\057\145\060\136\061\146\070\144\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\016\051\141\056\172\057\145\060\136\061\146"
			+ "\070\144\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\016\051\141\056\176\057\145\060\136"
			+ "\061\146\070\144\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\016\051\141\056\204\057\145\060\136\061\146\070"
			+ "\144\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\024\051\141\056\224"
			+ "\057\145\060\136\061\146\062\227\063\226\064\223\070"
			+ "\144\001\001\000\002\001\001\000\004\067\251\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\014\043\232\046\127\047\231\050\126\051\122\001\001"
			+ "\000\002\001\001\000\002\001\001\000\012\046\235\047"
			+ "\234\050\126\051\122\001\001\000\002\001\001\000\002"
			+ "\001\001\000\022\051\141\056\224\057\145\060\136\061"
			+ "\146\063\241\064\223\070\144\001\001\000\020\051\141"
			+ "\056\224\057\145\060\136\061\146\064\240\070\144\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\016"
			+ "\051\141\056\252\057\145\060\136\061\146\070\144\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\022\034\264\035\167\051\141\056"
			+ "\166\057\145\060\136\061\146\070\144\001\001\000\002"
			+ "\001\001\000\016\051\141\056\261\057\145\060\136\061"
			+ "\146\070\144\001\001\000\002\001\001\000\002\001\001"
			+ "\000\002\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\055\301\001\001\000\016\051\141\056\275\057\145\060"
			+ "\136\061\146\070\144\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\024\051\141"
			+ "\056\224\057\145\060\136\061\146\062\303\063\226\064"
			+ "\223\070\144\001\001\000\002\001\001\000\012\046\306"
			+ "\047\305\050\126\051\122\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\004"
			+ "\051\313\001\001\000\002\001\001\000\002\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\004\033\324\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\002\001"
			+ "\001\000\002\001\001\000\002\001\001\000\002\001\001"
			+ "\000\012\025\335\026\056\027\061\030\060\001\001\000"
			+ "\002\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001\000\002\001\001\000\002\001\001\000\004\023"
			+ "\345\001\001\000\002\001\001\000\002\001\001\000\002"
			+ "\001\001" });

	/** Access to <code>reduce_goto</code> table. */
	public short[][] reduce_table()
	{
		return _reduce_table;
	}

	/** Instance of action encapsulation class. */
	protected CUP$MJParser$actions action_obj;

	/** Action encapsulation object initializer. */
	protected void init_actions()
	{
		action_obj = new CUP$MJParser$actions(this);
	}

	/** Invoke a user supplied parse action. */
	public java_cup.runtime.Symbol do_action(int act_num,
			java_cup.runtime.lr_parser parser, java.util.Stack stack, int top)
			throws java.lang.Exception
	{
		/* call code in generated class */
		return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
	}

	/** Indicates start state. */
	public int start_state()
	{
		return 0;
	}

	/** Indicates start production. */
	public int start_production()
	{
		return 1;
	}

	/** <code>EOF</code> Symbol index. */
	public int EOF_sym()
	{
		return 0;
	}

	/** <code>error</code> Symbol index. */
	public int error_sym()
	{
		return 1;
	}

	/** User initialization code. */
	public void user_init() throws java.lang.Exception
	{

		MyTab.init(); // Universe scope

	}

	/** Scan to get the next Symbol. */
	public java_cup.runtime.Symbol scan() throws java.lang.Exception
	{

		Symbol s = this.getScanner().next_token();
		if (s != null)
		{
			if (s.value != null)
			{
				log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") "
						+ " " + s.value.toString());
			}
			else
			{
				log.info(s.toString() + "(" + Utils.symToString(s.sym) + ") "
						+ " NULLL!!!");
			}
		}

		return s;

	}

	Logger log = Logger.getLogger(getClass());

	public void syntax_error(Symbol cur_token)
	{
		int line = ((Symbol) cur_token).left;
		log.error("Syntax error (line " + line + ") Unexpected symbol "
				+ (((Symbol) cur_token).value));
		// report_error("\nSintaksna greska ", cur_token);
	}

	public void unrecovered_syntax_error(Symbol cur_token)
			throws java.lang.Exception
	{
		report_fatal_error("Unrecovered syntax error", cur_token);
	}

	public void report_fatal_error(String message, Object info)
			throws java.lang.Exception
	{
		done_parsing();
		report_error("Fatal error" + message, info);
	}

	public void report_error(String message, Object info)
	{
		// dump_stack();
		StringBuilder msg = new StringBuilder(message);
		if (info instanceof Symbol)
		{
			msg.append("(line ").append(((Symbol) info).left).append(")");
			msg.append(" Unexpected symbol " + (((Symbol) info).value));
		}
		log.error(msg.toString());
	}

	public void reportSemanticError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Semantic error (line ").append(line + ") : ")
				.append(message);
		log.error(sb.toString());
	}

	public void reportRecoveredSyntaxError(String message, int line)
	{
		StringBuilder sb = new StringBuilder();
		sb.append("Recovery syntax error (line ").append(line + ") : ")
				.append(message);
		log.error(sb.toString());
	}

}

/** Cup generated class to encapsulate user supplied action code. */
class CUP$MJParser$actions
{

	Obj currentTypeObj = MyTab.noObj;
	Obj currentClassObj = MyTab.noObj;

	Obj currentRetType = null;
	boolean returnFound = false;

	class Constant
	{
		public Object value;
		public Obj obj;

		public Constant(Object value, Obj obj)
		{
			this.value = value;
			this.obj = obj;
		}
	}

	public Obj insertSymbol(int kind, String name, Struct type)
	{
		Obj obj = MyTab.find(name);
		if (obj != MyTab.noObj)
			parser.log.error("Simbol " + name
					+ " vec postoji u trenutnom opsegu!");
		return MyTab.insert(kind, name, type);
	}

	private final MJParser parser;

	/** Constructor */
	CUP$MJParser$actions(MJParser parser)
	{
		this.parser = parser;
	}

	/** Method with the actual generated action code. */
	public final java_cup.runtime.Symbol CUP$MJParser$do_action(
			int CUP$MJParser$act_num,
			java_cup.runtime.lr_parser CUP$MJParser$parser,
			java.util.Stack CUP$MJParser$stack, int CUP$MJParser$top)
			throws java.lang.Exception
	{
		/* Symbol object for return from actions */
		java_cup.runtime.Symbol CUP$MJParser$result;

		/* select the action based on the action number */
		switch (CUP$MJParser$act_num)
		{
		/* . . . . . . . . . . . . . . . . . . . . */
			case 136: // MethodName ::= IDENT
			{
				Obj RESULT = null;
				int methodNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int methodNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String methodName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				// METHODNAME KOD
				Obj methObj = MyTab.currentScope.findSymbol(methodName);
				if (methObj != null && methObj != MyTab.noObj)
				{
					parser.reportSemanticError("Method " + methodName
							+ " already defined in current scope",
							methodNameleft);
					RESULT = MyTab.noObj;
				}
				else
				{
					Struct type = MyTab.noType;
					if (currentRetType != null)
						type = currentRetType.getType();
					RESULT = insertSymbol(Obj.Meth, methodName, type);
				}

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodName", 28,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 135: // ClassName ::= IDENT
			{
				Obj RESULT = null;
				int classNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int classNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String className = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				Obj classObjNode = MyTab.find(className);
				if (classObjNode != MyTab.noObj)
				{
					parser.reportSemanticError("Class " + className
							+ " already defined", classNameleft);
					RESULT = MyTab.noObj;
				}
				else
				{
					RESULT = insertSymbol(Obj.Type, className, new Struct(
							Struct.Class));
					MyTab.openScope();
				}

				currentClassObj = RESULT;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClassName", 32,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 134: // Type ::= IDENT
			{
				Obj RESULT = null;
				int typeNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int typeNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String typeName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				Obj typeObjNode = MyTab.find(typeName);
				if (typeObjNode == MyTab.noObj)
				{
					parser.reportSemanticError("Type " + typeName
							+ " undefined", typeNameleft);
					RESULT = MyTab.noObj;
				}
				else
				{
					if (typeObjNode.getKind() == Obj.Type)
						RESULT = typeObjNode;
					else
					{
						parser.reportSemanticError(typeName + " is not a type",
								typeNameleft);
						RESULT = MyTab.noObj;
					}
				}
				currentTypeObj = RESULT;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Type", 8,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 133: // ProgramName ::= IDENT
			{
				Obj RESULT = null;
				int pNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int pNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String pName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				RESULT = insertSymbol(Obj.Prog, pName, MyTab.noType);
				MyTab.openScope();
				// parser.log.info("Program name " + pName);

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ProgramName", 1,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 132: // Relop ::= LESSE
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 131: // Relop ::= LESS
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 130: // Relop ::= GRTE
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 129: // Relop ::= GRT
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 128: // Relop ::= NEQ
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 127: // Relop ::= EQ
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Relop", 53,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 126: // Mulop ::= MOD
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Mulop", 52,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 125: // Mulop ::= DIV
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Mulop", 52,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 124: // Mulop ::= MUL
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Mulop", 52,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 123: // Addop ::= SUB
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Addop", 51,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 122: // Addop ::= ADD
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Addop", 51,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 121: // ActualParamsList ::= Expr
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ActualParamsList", 27,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 120: // ActualParamsList ::= ActualParamsList COMMA Expr
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ActualParamsList",
						27,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 119: // ActualParamsOpt ::= error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong actual parameters in function call", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ActualParamsOpt", 26,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 118: // ActualParamsOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ActualParamsOpt", 26,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 117: // ActualParamsOpt ::= ActualParamsList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ActualParamsOpt", 26,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 116: // Factor ::= LPAREN Expr RPAREN
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor",
						47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 115: // Factor ::= NEW IDENT LBRACKET error RBRACKET
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError(
						"Wrong allocation expression", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor",
						47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 114: // Factor ::= NEW IDENT LBRACKET Expr RBRACKET
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor",
						47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 113: // Factor ::= NEW IDENT
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor",
						47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 112: // Factor ::= Value
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor", 47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 111: // Factor ::= Designator LPAREN ActualParamsOpt RPAREN
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor",
						47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 110: // Factor ::= Designator
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Factor", 47,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 109: // Term ::= Factor
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Term", 45,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 108: // Term ::= Term Mulop Factor
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Term",
						45,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 107: // TermList ::= Term
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"TermList", 46,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 106: // TermList ::= TermList Addop Term
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"TermList",
						46,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 105: // Expr ::= TermList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Expr", 44,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 104: // Expr ::= SUB TermList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Expr",
						44,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 103: // DesignatorRight ::= DEC
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight", 40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 102: // DesignatorRight ::= INC
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight", 40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 101: // DesignatorRight ::= LPAREN error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError("Wrong function call", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight",
						40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 100: // DesignatorRight ::= LPAREN ActualParamsOpt RPAREN
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight",
						40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 99: // DesignatorRight ::= ASSIGN error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong assignment expression", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight",
						40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 98: // DesignatorRight ::= ASSIGN Expr
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorRight",
						40,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 97: // DesignatorPart ::= LBRACKET error RBRACKET
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError("Wrong index expression",
						eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorPart",
						43,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 96: // DesignatorPart ::= LBRACKET Expr RBRACKET
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorPart",
						43,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 95: // DesignatorPart ::= DOT IDENT
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorPart",
						43,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 94: // DesignatorList ::= DesignatorPart
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorList", 42,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 93: // DesignatorList ::= DesignatorList DesignatorPart
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorList",
						42,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 92: // DesignatorListOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorListOpt", 41,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 91: // DesignatorListOpt ::= DesignatorList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"DesignatorListOpt", 41,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 90: // Designator ::= IDENT DesignatorListOpt
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Designator",
						39,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 89: // SimpleStatement ::= LBRACE StatementListOpt RBRACE
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 88: // SimpleStatement ::= PRINT LPAREN error COMMA NUMBER
						// RPAREN SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 4)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 4)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 4)).value;
				parser.reportRecoveredSyntaxError("Print function call error",
						eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 87: // SimpleStatement ::= PRINT LPAREN Expr COMMA NUMBER
						// RPAREN SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 86: // SimpleStatement ::= PRINT LPAREN error RPAREN SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).value;
				parser.reportRecoveredSyntaxError("Print function call error",
						eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 85: // SimpleStatement ::= PRINT LPAREN Expr RPAREN SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 84: // SimpleStatement ::= READ LPAREN error RPAREN SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 2)).value;
				parser.reportRecoveredSyntaxError("Read function call error",
						eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 83: // SimpleStatement ::= READ LPAREN Designator RPAREN SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 82: // SimpleStatement ::= RETURN Expr SEMI
			{
				Object RESULT = null;
				returnFound = true;
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 81: // SimpleStatement ::= RETURN SEMI
			{
				Object RESULT = null;
				returnFound = true;
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 80: // SimpleStatement ::= BREAK SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 79: // SimpleStatement ::= Designator DesignatorRight SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"SimpleStatement",
						38,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 78: // CondFact ::= Expr
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"CondFact", 50,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 77: // CondFact ::= Expr Relop Expr
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"CondFact",
						50,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 76: // CondTerm ::= CondFact
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"CondTerm", 49,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 75: // CondTerm ::= CondTerm LAND CondFact
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"CondTerm",
						49,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 74: // Condition ::= error SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError("Wrong condition expression",
						eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Condition",
						48,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 73: // Condition ::= CondTerm
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Condition", 48,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 72: // Condition ::= CondTerm LOR CondTerm
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Condition",
						48,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 71: // ClosedStatement ::= WHILE LPAREN Condition RPAREN
						// ClosedStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClosedStatement",
						37,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 70: // ClosedStatement ::= IF LPAREN Condition RPAREN
						// ClosedStatement ELSE ClosedStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClosedStatement",
						37,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 69: // ClosedStatement ::= SimpleStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClosedStatement", 37,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 68: // OpenStatement ::= WHILE LPAREN Condition RPAREN
						// OpenStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"OpenStatement",
						36,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 67: // OpenStatement ::= IF LPAREN Condition RPAREN
						// ClosedStatement ELSE OpenStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"OpenStatement",
						36,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 66: // OpenStatement ::= IF LPAREN Condition RPAREN Statement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"OpenStatement",
						36,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 4)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 65: // Statement ::= ClosedStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Statement", 33,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 64: // Statement ::= OpenStatement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Statement", 33,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 63: // StatementList ::= Statement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"StatementList", 35,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 62: // StatementList ::= StatementList Statement
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"StatementList",
						35,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 61: // StatementListOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"StatementListOpt", 34,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 60: // StatementListOpt ::= StatementList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"StatementListOpt", 34,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 59: // FormalParam ::= IDENT IDENT LBRACKET RBRACKET
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParam",
						25,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 58: // FormalParam ::= IDENT IDENT
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParam",
						25,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 57: // FormalParamsList ::= error SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of formal parameters", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParamsList",
						24,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 56: // FormalParamsList ::= FormalParam
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParamsList", 24,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 55: // FormalParamsList ::= FormalParamsList COMMA FormalParam
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParamsList",
						24,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 54: // FormalParamsOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParamsOpt", 23,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 53: // FormalParamsOpt ::= FormalParamsList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FormalParamsOpt", 23,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 52: // RetType ::= IDENT
			{
				Object RESULT = null;
				int retTypeNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int retTypeNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String retTypeName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				Obj retObj = MyTab.find(retTypeName);
				if (retObj != MyTab.noObj)
				{
					currentRetType = retObj;
				}
				else
				{
					parser.reportSemanticError("Return type " + retTypeName
							+ "undefined", retTypeNameleft);
					currentRetType = null;
				}

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"RetType", 22,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 51: // RetType ::= VOID
			{
				Object RESULT = null;
				currentRetType = MyTab.noObj;
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"RetType", 22,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 50: // LocalVarDeclLine ::= IDENT VarDeclSequence SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclLine",
						13,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 49: // LocalVarDeclList ::= IDENT error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of variable", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclList",
						12,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 48: // LocalVarDeclList ::= IDENT error SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of variable", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclList",
						12,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 47: // LocalVarDeclList ::= LocalVarDeclLine
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclList", 12,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 46: // LocalVarDeclList ::= LocalVarDeclLine LocalVarDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclList",
						12,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 45: // LocalVarDeclOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclOpt", 11,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 44: // LocalVarDeclOpt ::= LocalVarDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"LocalVarDeclOpt", 11,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 43: // MethodDecl ::= RetType MethodName LPAREN FormalParamsOpt
						// RPAREN LocalVarDeclOpt LBRACE StatementListOpt RBRACE
			{
				Object RESULT = null;
				int funcNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 7)).left;
				int funcNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 7)).right;
				Obj funcName = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 7)).value;

				// METHODDECL KOD
				if (currentRetType != null && currentRetType != MyTab.noObj)
				{
					if (!returnFound)
						parser.reportSemanticError(
								"No return statement in method "
										+ funcName.getName(), funcNameleft);
				}
				currentRetType = null;
				returnFound = false;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodDecl",
						21,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 8)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 42: // MethodDeclList ::= MethodDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodDeclList", 20,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 41: // MethodDeclList ::= MethodDeclList MethodDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodDeclList",
						20,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 40: // MethodDeclOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodDeclOpt", 19,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 39: // MethodDeclOpt ::= MethodDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"MethodDeclOpt", 19,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 38: // ClassMethodDeclOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClassMethodDeclOpt", 31,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 37: // ClassMethodDeclOpt ::= LBRACE MethodDeclOpt RBRACE
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClassMethodDeclOpt",
						31,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 36: // FieldDeclLine ::= IDENT VarDeclSequence SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldDeclLine",
						16,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 35: // FieldsDeclList ::= error SEMI
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of variable", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclList",
						15,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 34: // FieldsDeclList ::= error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of variable", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclList", 15,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 33: // FieldsDeclList ::= FieldDeclLine
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclList", 15,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 32: // FieldsDeclList ::= FieldDeclLine FieldsDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclList",
						15,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 31: // FieldsDeclOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclOpt", 14,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 30: // FieldsDeclOpt ::= FieldsDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"FieldsDeclOpt", 14,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 29: // ExtendsOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ExtendsOpt", 30,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 28: // ExtendsOpt ::= error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError("Error in extension", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ExtendsOpt", 30,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 27: // ExtendsOpt ::= EXTENDS IDENT
			{
				Object RESULT = null;
				int superClassNameleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int superClassNameright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String superClassName = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				Obj obj = MyTab.find(superClassName);
				if (obj.getKind() != Obj.Type
						&& obj.getType().getKind() != Struct.Class)
				{
					parser.reportSemanticError("Super class " + superClassName
							+ " undefined", superClassNameleft);
				}

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ExtendsOpt",
						30,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 26: // ClassDecl ::= CLASS ClassName ExtendsOpt LBRACE
						// FieldsDeclOpt ClassMethodDeclOpt RBRACE
			{
				Object RESULT = null;

				if (currentClassObj != MyTab.noObj)
					MyTab.closeScope();
				currentClassObj = MyTab.noObj;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ClassDecl",
						29,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 6)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 25: // Value ::= STRING_CONST
			{
				Constant RESULT = null;
				int valueleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int valueright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				String value = (String) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				RESULT = new Constant(value, MyTab.stringObj);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Value", 54,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 24: // Value ::= BOOL_CONST
			{
				Constant RESULT = null;
				int valueleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int valueright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Boolean value = (Boolean) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				RESULT = new Constant(value, MyTab.boolObj);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Value", 54,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 23: // Value ::= CHAR_CONST
			{
				Constant RESULT = null;
				int valueleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int valueright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Character value = (Character) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				RESULT = new Constant(value, MyTab.charObj);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Value", 54,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 22: // Value ::= NUMBER
			{
				Constant RESULT = null;
				int valueleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int valueright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Integer value = (Integer) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				RESULT = new Constant(value, MyTab.intObj);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Value", 54,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 21: // VarDecl ::= IDENT LBRACKET RBRACKET
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"VarDecl",
						17,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 20: // VarDecl ::= IDENT
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"VarDecl", 17,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 19: // VarDeclSequence ::= VarDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"VarDeclSequence", 18,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 18: // VarDeclSequence ::= VarDeclSequence COMMA VarDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"VarDeclSequence",
						18,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 17: // GlobalVarDeclSequence ::= error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of variable", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalVarDeclSequence", 10,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 16: // GlobalVarDeclSequence ::= VarDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalVarDeclSequence", 10,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 15: // GlobalVarDeclSequence ::= GlobalVarDeclSequence COMMA
						// VarDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalVarDeclSequence",
						10,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 14: // GlobalVarDeclLine ::= IDENT GlobalVarDeclSequence SEMI
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalVarDeclLine",
						9,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 13: // ConstDecl ::= IDENT ASSIGN Value
			{
				Object RESULT = null;
				int infoleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int inforight = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Constant info = (Constant) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;

				if (!info.obj.getType().assignableTo(currentTypeObj.getType()))
				{
					parser.reportSemanticError(
							"Type " + info.obj.getName()
									+ " not assignable to type "
									+ currentTypeObj.getName(), infoleft);
				}

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ConstDecl",
						7,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 12: // ConstDecl ::= error
			{
				Object RESULT = null;
				int eleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).left;
				int eright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).right;
				Object e = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.peek()).value;
				parser.reportRecoveredSyntaxError(
						"Wrong declaration of constant", eleft);
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ConstDecl", 7,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 11: // ConstDeclSequence ::= ConstDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ConstDeclSequence", 6,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 10: // ConstDeclSequence ::= ConstDeclSequence COMMA ConstDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ConstDeclSequence",
						6,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 2)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 9: // ConstDeclLine ::= CONST Type ConstDeclSequence SEMI
			{
				Object RESULT = null;

				currentTypeObj = MyTab.noObj;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"ConstDeclLine",
						5,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 3)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 8: // GlobalDecl ::= ClassDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDecl", 4,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 7: // GlobalDecl ::= ConstDeclLine
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDecl", 4,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 6: // GlobalDecl ::= GlobalVarDeclLine
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDecl", 4,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 5: // GlobalDeclList ::= GlobalDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDeclList", 3,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 4: // GlobalDeclList ::= GlobalDeclList GlobalDecl
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDeclList",
						3,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 3: // GlobalDeclarationsOpt ::=
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDeclarationsOpt", 2,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 2: // GlobalDeclarationsOpt ::= GlobalDeclList
			{
				Object RESULT = null;

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"GlobalDeclarationsOpt", 2,
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 1: // $START ::= Program EOF
			{
				Object RESULT = null;
				int start_valleft = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).left;
				int start_valright = ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).right;
				Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack
						.elementAt(CUP$MJParser$top - 1)).value;
				RESULT = start_val;
				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"$START",
						0,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 1)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				/* ACCEPT */
				CUP$MJParser$parser.done_parsing();
				return CUP$MJParser$result;

				/* . . . . . . . . . . . . . . . . . . . . */
			case 0: // Program ::= PROGRAM ProgramName GlobalDeclarationsOpt
					// LBRACE MethodDeclOpt RBRACE
			{
				Object RESULT = null;

				MyTab.closeScope();
				MyTab.dump();

				CUP$MJParser$result = parser.getSymbolFactory().newSymbol(
						"Program",
						0,
						((java_cup.runtime.Symbol) CUP$MJParser$stack
								.elementAt(CUP$MJParser$top - 5)),
						((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()),
						RESULT);
			}
				return CUP$MJParser$result;

				/* . . . . . . */
			default:
				throw new Exception(
						"Invalid action number found in internal parse table");

		}
	}
}
